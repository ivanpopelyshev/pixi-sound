{"version":3,"file":"pixi-sound.js","sourceRoot":"","sources":["../src/Filter.ts","../src/Filterable.ts","../src/Sound.ts","../src/SoundLibrary.ts","../src/filters/DistortionFilter.ts","../src/filters/EqualizerFilter.ts","../src/filters/MonoFilter.ts","../src/filters/ReverbFilter.ts","../src/filters/StereoFilter.ts","../src/filters/TelephoneFilter.ts","../src/htmlaudio/HTMLAudioContext.ts","../src/htmlaudio/HTMLAudioInstance.ts","../src/htmlaudio/HTMLAudioMedia.ts","../src/interfaces/IMedia.ts","../src/interfaces/IMediaContext.ts","../src/interfaces/IMediaInstance.ts","../src/loader/index.ts","../src/sprites/SoundSprite.ts","../src/utils/polyfills.ts","../src/utils/SoundUtils.ts","../src/webaudio/WebAudioContext.ts","../src/webaudio/WebAudioInstance.ts","../src/webaudio/WebAudioMedia.ts","../src/webaudio/WebAudioNodes.ts","../src/zexport/exporter.ts"],"names":[],"mappings":"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","sourcesContent":["namespace pixi_sound {\r\n\t/**\r\n\t * Represents a single sound element. Can be used to play, pause, etc. sound instances.\r\n\t *\r\n\t * @class Filter\r\n\t * @memberof PIXI.sound.filters\r\n\t * @param {AudioNode} destination The audio node to use as the destination for the input AudioNode\r\n\t * @param {AudioNode} [source] Optional output node, defaults to destination node. This is useful\r\n\t *        when creating filters which contains multiple AudioNode elements chained together.\r\n\t */\r\n\texport class Filter {\r\n\t\t/**\r\n\t\t * The node to connect for the filter to the previous filter.\r\n\t\t * @name PIXI.sound.filters.Filter#destination\r\n\t\t * @type {AudioNode}\r\n\t\t */\r\n\t\tpublic destination: AudioNode;\r\n\r\n\t\t/**\r\n\t\t * The node to connect for the filter to the previous filter.\r\n\t\t * @name PIXI.sound.filters.Filter#source\r\n\t\t * @type {AudioNode}\r\n\t\t */\r\n\t\tpublic source: AudioNode;\r\n\r\n\t\tconstructor(destination: AudioNode, source?: AudioNode) {\r\n\t\t\tthis.destination = destination;\r\n\t\t\tthis.source = source || destination;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Connect to the destination.\r\n\t\t * @method PIXI.sound.filters.Filter#connect\r\n\t\t * @param {AudioNode} destination The destination node to connect the output to\r\n\t\t */\r\n\t\tconnect(destination: AudioNode): void {\r\n\t\t\tthis.source.connect(destination);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Completely disconnect filter from destination and source nodes.\r\n\t\t * @method PIXI.sound.filters.Filter#disconnect\r\n\t\t */\r\n\t\tdisconnect(): void {\r\n\t\t\tthis.source.disconnect();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Destroy the filter and don't use after this.\r\n\t\t * @method PIXI.sound.filters.Filter#destroy\r\n\t\t */\r\n\t\tdestroy(): void {\r\n\t\t\tthis.disconnect();\r\n\t\t\tthis.destination = null;\r\n\t\t\tthis.source = null;\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound {\r\n\r\n\t/**\r\n\t * Abstract class which SoundNodes and SoundContext\r\n\t * both extend. This provides the functionality for adding\r\n\t * dynamic filters.\r\n\t * @class Filterable\r\n\t * @memberof PIXI.sound\r\n\t * @param {AudioNode} source The source audio node\r\n\t * @param {AudioNode} destination The output audio node\r\n\t * @private\r\n\t */\r\n\texport class Filterable {\r\n\t\t/**\r\n\t\t * Get the gain node\r\n\t\t * @name PIXI.sound.Filterable#_input\r\n\t\t * @type {AudioNode}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _input: AudioNode;\r\n\r\n\t\t/**\r\n\t\t * The destination output audio node\r\n\t\t * @name PIXI.sound.Filterable#_output\r\n\t\t * @type {AudioNode}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _output: AudioNode;\r\n\r\n\t\t/**\r\n\t\t * Collection of filters.\r\n\t\t * @name PIXI.sound.Filterable#_filters\r\n\t\t * @type {PIXI.sound.filters.Filter[]}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _filters: Filter[];\r\n\r\n\t\tconstructor(input: AudioNode, output: AudioNode) {\r\n\t\t\tthis._output = output;\r\n\t\t\tthis._input = input;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The destination output audio node\r\n\t\t * @name PIXI.sound.Filterable#destination\r\n\t\t * @type {AudioNode}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tget destination(): AudioNode {\r\n\t\t\treturn this._input;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The collection of filters\r\n\t\t * @name PIXI.sound.Filterable#filters\r\n\t\t * @type {PIXI.sound.filters.Filter[]}\r\n\t\t */\r\n\t\tget filters(): Filter[] {\r\n\t\t\treturn this._filters;\r\n\t\t}\r\n\r\n\t\tset filters(filters: Filter[]) {\r\n\t\t\tif (this._filters) {\r\n\t\t\t\tthis._filters.forEach((filter: Filter) => {\r\n\t\t\t\t\tif (filter) {\r\n\t\t\t\t\t\tfilter.disconnect();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tthis._filters = null;\r\n\t\t\t\t// Reconnect direct path\r\n\t\t\t\tthis._input.connect(this._output);\r\n\t\t\t}\r\n\r\n\t\t\tif (filters && filters.length) {\r\n\t\t\t\tthis._filters = filters.slice(0);\r\n\r\n\t\t\t\t// Disconnect direct path before inserting filters\r\n\t\t\t\tthis._input.disconnect();\r\n\r\n\t\t\t\t// Connect each filter\r\n\t\t\t\tlet prevFilter: Filter = null;\r\n\t\t\t\tfilters.forEach((filter: Filter) => {\r\n\t\t\t\t\tif (prevFilter === null) {\r\n\t\t\t\t\t\t// first filter is the destination\r\n\t\t\t\t\t\t// for the analyser\r\n\t\t\t\t\t\tthis._input.connect(filter.destination);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tprevFilter.connect(filter.destination);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tprevFilter = filter;\r\n\t\t\t\t});\r\n\t\t\t\tprevFilter.connect(this._output);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Cleans up.\r\n\t\t * @method PIXI.sound.Filterable#destroy\r\n\t\t */\r\n\t\tpublic destroy(): void {\r\n\t\t\tthis.filters = null;\r\n\t\t\tthis._input = null;\r\n\t\t\tthis._output = null;\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound {\r\n// Constructor options\r\n\texport interface Options {\r\n\t\tautoPlay?: boolean;\r\n\t\tpreaload?: boolean;\r\n\t\tsingleInstance?: boolean;\r\n\t\tvolume?: number;\r\n\t\tspeed?: number;\r\n\t\tcomplete?: CompleteCallback;\r\n\t\tloaded?: LoadedCallback;\r\n\t\tpreload?: boolean;\r\n\t\tloop?: boolean;\r\n\t\turl?: string;\r\n\t\tsource?: ArrayBuffer | HTMLAudioElement;\r\n\t\tsprites?: { [id: string]: SoundSpriteData };\r\n\t}\r\n\r\n// Interface for play options\r\n\texport interface PlayOptions {\r\n\t\tstart?: number;\r\n\t\tend?: number;\r\n\t\tspeed?: number;\r\n\t\tloop?: boolean;\r\n\t\tvolume?: number;\r\n\t\tsprite?: string;\r\n\t\tmuted?: boolean;\r\n\t\tcomplete?: CompleteCallback;\r\n\t\tloaded?: LoadedCallback;\r\n\t}\r\n\r\n\t/**\r\n\t * Callback when sound is loaded.\r\n\t * @callback PIXI.sound.Sound~loadedCallback\r\n\t * @param {Error} err The callback error.\r\n\t * @param {PIXI.sound.Sound} sound The instance of new sound.\r\n\t * @param {PIXI.sound.IMediaInstance} instance The instance of auto-played sound.\r\n\t */\r\n\texport declare type LoadedCallback = (err: Error, sound?: Sound, instance?: IMediaInstance) => void;\r\n\r\n\t/**\r\n\t * Callback when sound is completed.\r\n\t * @callback PIXI.sound.Sound~completeCallback\r\n\t * @param {PIXI.sound.Sound} sound The instance of sound.\r\n\t */\r\n\texport declare type CompleteCallback = (sound: Sound) => void;\r\n\r\n\t/**\r\n\t * Sound represents a single piece of loaded media. When playing a sound {@link PIXI.sound.IMediaInstance} objects\r\n\t * are created. Properties such a `volume`, `pause`, `mute`, `speed`, etc will have an effect on all instances.\r\n\t * @class Sound\r\n\t * @memberof PIXI.sound\r\n\t */\r\n\texport class Sound {\r\n\t\t/**\r\n\t\t * Pool of instances\r\n\t\t * @name PIXI.sound.Sound#_pool\r\n\t\t * @type {Array<IMediaInstance>}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate static _pool: IMediaInstance[] = [];\r\n\r\n\t\t/**\r\n\t\t * `true` if the buffer is loaded.\r\n\t\t * @name PIXI.sound.Sound#isLoaded\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tpublic isLoaded: boolean;\r\n\r\n\t\t/**\r\n\t\t * `true` if the sound is currently being played.\r\n\t\t * @name PIXI.sound.Sound#isPlaying\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic isPlaying: boolean;\r\n\r\n\t\t/**\r\n\t\t * true to start playing immediate after load.\r\n\t\t * @name PIXI.sound.Sound#autoPlay\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic autoPlay: boolean;\r\n\r\n\t\t/**\r\n\t\t * `true` to disallow playing multiple layered instances at once.\r\n\t\t * @name PIXI.sound.Sound#singleInstance\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tpublic singleInstance: boolean;\r\n\r\n\t\t/**\r\n\t\t * `true` to immediately start preloading.\r\n\t\t * @name PIXI.sound.Sound#preload\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic preload: boolean;\r\n\r\n\t\t/**\r\n\t\t * The file source to load.\r\n\t\t * @name PIXI.sound.Sound#url\r\n\t\t * @type {String}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic url: string;\r\n\r\n\t\t/**\r\n\t\t * The constructor options.\r\n\t\t * @name PIXI.sound.Sound#options\r\n\t\t * @type {Object}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic options: Options;\r\n\r\n\t\t/**\r\n\t\t * The audio source\r\n\t\t * @name PIXI.sound.Sound#media\r\n\t\t * @type {PIXI.sound.IMedia}\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic media: IMedia;\r\n\r\n\t\t/**\r\n\t\t * The collection of instances being played.\r\n\t\t * @name PIXI.sound.Sound#_instances\r\n\t\t * @type {Array<IMediaInstance>}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _instances: IMediaInstance[];\r\n\r\n\t\t/**\r\n\t\t * Reference to the sound context.\r\n\t\t * @name PIXI.sound.Sound#_sprites\r\n\t\t * @type {SoundContext}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _sprites: SoundSprites;\r\n\r\n\t\t/**\r\n\t\t * The options when auto-playing.\r\n\t\t * @name PIXI.sound.Sound#_autoPlayOptions\r\n\t\t * @type {PlayOptions}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _autoPlayOptions: PlayOptions;\r\n\r\n\t\t/**\r\n\t\t * The internal volume.\r\n\t\t * @name PIXI.sound.Sound#_volume\r\n\t\t * @type {number}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _volume: number;\r\n\r\n\t\t/**\r\n\t\t * The internal paused state.\r\n\t\t * @name PIXI.sound.Sound#_paused\r\n\t\t * @type {boolean}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _paused: boolean;\r\n\r\n\t\t/**\r\n\t\t * The internal muted state.\r\n\t\t * @name PIXI.sound.Sound#_muted\r\n\t\t * @type {boolean}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _muted: boolean;\r\n\r\n\t\t/**\r\n\t\t * The internal volume.\r\n\t\t * @name PIXI.sound.Sound#_loop\r\n\t\t * @type {boolean}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _loop: boolean;\r\n\r\n\t\t/**\r\n\t\t * The internal playbackRate\r\n\t\t * @name PIXI.sound.Sound#_speed\r\n\t\t * @type {number}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _speed: number;\r\n\r\n\t\t/**\r\n\t\t * Create a new sound instance from source.\r\n\t\t * @method PIXI.sound.Sound.from\r\n\t\t * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\r\n\t\t *        or the object of options to use.\r\n\t\t * @param {String} [options.url] If `options` is an object, the source of file.\r\n\t\t * @param {HTMLAudioElement|ArrayBuffer} [options.source] The source, if already preloaded.\r\n\t\t * @param {boolean} [options.autoPlay=false] true to play after loading.\r\n\t\t * @param {boolean} [options.preload=false] true to immediately start preloading.\r\n\t\t * @param {boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\r\n\t\t * @param {number} [options.volume=1] The amount of volume 1 = 100%.\r\n\t\t * @param {number} [options.speed=1] The playback rate where 1 is 100% speed.\r\n\t\t * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\r\n\t\t *        with a `start` and `end`, which are the times in seconds. Optionally, can include\r\n\t\t *        a `speed` amount where 1 is 100% speed.\r\n\t\t * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback\r\n\t\t *        when play is finished.\r\n\t\t * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\r\n\t\t * @param {boolean} [options.loop=false] true to loop the audio playback.\r\n\t\t * @return {PIXI.sound.Sound} Created sound instance.\r\n\t\t */\r\n\t\tpublic static from(source: string | Options | ArrayBuffer | HTMLAudioElement): Sound {\r\n\t\t\tlet options: Options = {};\r\n\r\n\t\t\tif (typeof source === \"string\") {\r\n\t\t\t\toptions.url = source as string;\r\n\t\t\t}\r\n\t\t\telse if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement) {\r\n\t\t\t\toptions.source = source;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\toptions = source;\r\n\t\t\t}\r\n\r\n\t\t\t// Default settings\r\n\t\t\toptions = Object.assign({\r\n\t\t\t\tautoPlay: false,\r\n\t\t\t\tsingleInstance: false,\r\n\t\t\t\turl: null,\r\n\t\t\t\tsource: null,\r\n\t\t\t\tpreload: false,\r\n\t\t\t\tvolume: 1,\r\n\t\t\t\tspeed: 1,\r\n\t\t\t\tcomplete: null,\r\n\t\t\t\tloaded: null,\r\n\t\t\t\tloop: false,\r\n\t\t\t}, options);\r\n\r\n\t\t\t// Resolve url in-case it has a special format\r\n\t\t\tif (options.url) {\r\n\t\t\t\toptions.url = SoundUtils.resolveUrl(options.url);\r\n\t\t\t}\r\n\r\n\t\t\tObject.freeze(options);\r\n\r\n\t\t\tconst media: IMedia = SoundLibrary.instance.useLegacy ?\r\n\t\t\t\tnew htmlaudio.HTMLAudioMedia() :\r\n\t\t\t\tnew webaudio.WebAudioMedia();\r\n\r\n\t\t\treturn new Sound(media, options);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Constructor, use `PIXI.sound.Sound.from`\r\n\t\t * @private\r\n\t\t */\r\n\t\tconstructor(media: IMedia, options: Options) {\r\n\t\t\tthis.media = media;\r\n\t\t\tthis.options = options;\r\n\t\t\tthis._instances = [];\r\n\t\t\tthis._sprites = {};\r\n\r\n\t\t\tthis.media.init(this);\r\n\r\n\t\t\tconst complete = options.complete;\r\n\t\t\tthis._autoPlayOptions = complete ? {complete} : null;\r\n\t\t\tthis.isLoaded = false;\r\n\t\t\tthis.isPlaying = false;\r\n\t\t\tthis.autoPlay = options.autoPlay;\r\n\t\t\tthis.singleInstance = options.singleInstance;\r\n\t\t\tthis.preload = options.preload || this.autoPlay;\r\n\t\t\tthis.url = options.url;\r\n\t\t\tthis.speed = options.speed;\r\n\t\t\tthis.volume = options.volume;\r\n\t\t\tthis.loop = options.loop;\r\n\r\n\t\t\tif (options.sprites) {\r\n\t\t\t\tthis.addSprites(options.sprites);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.preload) {\r\n\t\t\t\tthis._preload(options.loaded);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Instance of the media context\r\n\t\t * @name PIXI.sound.Sound#context\r\n\t\t * @type {PIXI.sound.IMediaContext}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get context(): IMediaContext {\r\n\t\t\treturn SoundLibrary.instance.context;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops all the instances of this sound from playing.\r\n\t\t * @method PIXI.sound.Sound#pause\r\n\t\t * @return {PIXI.sound.Sound} Instance of this sound.\r\n\t\t */\r\n\t\tpublic pause(): Sound {\r\n\t\t\tthis.isPlaying = false;\r\n\t\t\tthis.paused = true;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Resuming all the instances of this sound from playing\r\n\t\t * @method PIXI.sound.Sound#resume\r\n\t\t * @return {PIXI.sound.Sound} Instance of this sound.\r\n\t\t */\r\n\t\tpublic resume(): Sound {\r\n\t\t\tthis.isPlaying = this._instances.length > 0;\r\n\t\t\tthis.paused = false;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops all the instances of this sound from playing.\r\n\t\t * @name PIXI.sound.Sound#paused\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get paused(): boolean {\r\n\t\t\treturn this._paused;\r\n\t\t}\r\n\r\n\t\tpublic set paused(paused: boolean) {\r\n\t\t\tthis._paused = paused;\r\n\t\t\tthis.refreshPaused();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The playback rate\r\n\t\t * @name PIXI.sound.Sound#speed\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tpublic get speed(): number {\r\n\t\t\treturn this._speed;\r\n\t\t}\r\n\r\n\t\tpublic set speed(speed: number) {\r\n\t\t\tthis._speed = speed;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the filters. Only supported with WebAudio.\r\n\t\t * @name PIXI.sound.Sound#filters\r\n\t\t * @type {Array<PIXI.sound.filters.Filter>}\r\n\t\t */\r\n\t\tpublic get filters(): Filter[] {\r\n\t\t\treturn this.media.filters;\r\n\t\t}\r\n\r\n\t\tpublic set filters(filters: Filter[]) {\r\n\t\t\tthis.media.filters = filters;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Add a sound sprite, which is a saved instance of a longer sound.\r\n\t\t * Similar to an image spritesheet.\r\n\t\t * @method PIXI.sound.Sound#addSprites\r\n\t\t * @param {String} alias The unique name of the sound sprite.\r\n\t\t * @param {object} data Either completed function or play options.\r\n\t\t * @param {number} data.start Time when to play the sound in seconds.\r\n\t\t * @param {number} data.end Time to end playing in seconds.\r\n\t\t * @param {number} [data.speed] Override default speed, default to the Sound's speed setting.\r\n\t\t * @return {PIXI.sound.SoundSprite} Sound sprite result.\r\n\t\t */\r\n\t\tpublic addSprites(alias: string, data: SoundSpriteData): SoundSprite;\r\n\r\n\t\t/**\r\n\t\t * Convenience method to add more than one sprite add a time.\r\n\t\t * @method PIXI.sound.Sound#addSprites\r\n\t\t * @param {Object} data Map of sounds to add where the key is the alias,\r\n\t\t *        and the data are configuration options, see {@PIXI.sound.Sound#addSprite} for info on data.\r\n\t\t * @return {Object} The map of sound sprites added.\r\n\t\t */\r\n\t\tpublic addSprites(sprites: { [id: string]: SoundSpriteData }): SoundSprites;\r\n\r\n\t\t// Actual implementation\r\n\t\tpublic addSprites(source: string | { [id: string]: SoundSpriteData }, data?: SoundSpriteData): SoundSprite | SoundSprites {\r\n\t\t\tif (typeof source === \"object\") {\r\n\t\t\t\tconst results: SoundSprites = {};\r\n\t\t\t\tfor (const alias in source) {\r\n\t\t\t\t\tresults[alias] = this.addSprites(alias, source[alias]);\r\n\t\t\t\t}\r\n\t\t\t\treturn results;\r\n\t\t\t}\r\n\t\t\telse if (typeof source === \"string\") {\r\n\t\t\t\tconsole.assert(!this._sprites[source], `Alias ${source} is already taken`);\r\n\t\t\t\tconst sprite = new SoundSprite(this, data);\r\n\t\t\t\tthis._sprites[source] = sprite;\r\n\t\t\t\treturn sprite;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\r\n\t\t * @method PIXI.sound.Sound#destroy\r\n\t\t */\r\n\t\tpublic destroy(): void {\r\n\t\t\tthis._removeInstances();\r\n\t\t\tthis.removeSprites();\r\n\t\t\tthis.media.destroy();\r\n\t\t\tthis.media = null;\r\n\t\t\tthis._sprites = null;\r\n\t\t\tthis._instances = null;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Remove all sound sprites.\r\n\t\t * @method PIXI.sound.Sound#removeSprites\r\n\t\t * @return {PIXI.sound.Sound} Sound instance for chaining.\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Remove a sound sprite.\r\n\t\t * @method PIXI.sound.Sound#removeSprites\r\n\t\t * @param {String} alias The unique name of the sound sprite.\r\n\t\t * @return {PIXI.sound.Sound} Sound instance for chaining.\r\n\t\t */\r\n\t\tpublic removeSprites(alias?: string): Sound {\r\n\t\t\tif (!alias) {\r\n\t\t\t\tfor (const name in this._sprites) {\r\n\t\t\t\t\tthis.removeSprites(name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst sprite: SoundSprite = this._sprites[alias];\r\n\r\n\t\t\t\tif (sprite !== undefined) {\r\n\t\t\t\t\tsprite.destroy();\r\n\t\t\t\t\tdelete this._sprites[alias];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * If the current sound is playable (loaded).\r\n\t\t * @name PIXI.sound.Sound#isPlayable\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get isPlayable(): boolean {\r\n\t\t\treturn this.isLoaded && this.media && this.media.isPlayable;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops all the instances of this sound from playing.\r\n\t\t * @method PIXI.sound.Sound#stop\r\n\t\t * @return {PIXI.sound.Sound} Instance of this sound.\r\n\t\t */\r\n\t\tpublic stop(): Sound {\r\n\t\t\tif (!this.isPlayable) {\r\n\t\t\t\tthis.autoPlay = false;\r\n\t\t\t\tthis._autoPlayOptions = null;\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\t// Go in reverse order so we don't skip items\r\n\t\t\tfor (let i = this._instances.length - 1; i >= 0; i--) {\r\n\t\t\t\tthis._instances[i].stop();\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Play a sound sprite, which is a saved instance of a longer sound.\r\n\t\t * Similar to an image spritesheet.\r\n\t\t * @method PIXI.sound.Sound#play\r\n\t\t * @param {String} alias The unique name of the sound sprite.\r\n\t\t * @param {object} data Either completed function or play options.\r\n\t\t * @param {number} data.start Time when to play the sound in seconds.\r\n\t\t * @param {number} data.end Time to end playing in seconds.\r\n\t\t * @param {number} [data.speed] Override default speed, default to the Sound's speed setting.\r\n\t\t * @param {PIXI.sound.Sound~completeCallback} [callback] Callback when completed.\r\n\t\t * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\r\n\t\t *        this cannot be reused after it is done playing. Returns a Promise if the sound\r\n\t\t *        has not yet loaded.\r\n\t\t */\r\n\t\tpublic play(alias: string, callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\r\n\r\n\t\t/**\r\n\t\t * Plays the sound.\r\n\t\t * @method PIXI.sound.Sound#play\r\n\t\t * @param {PIXI.sound.Sound~completeCallback|object} options Either completed function or play options.\r\n\t\t * @param {number} [options.start=0] Time when to play the sound in seconds.\r\n\t\t * @param {number} [options.end] Time to end playing in seconds.\r\n\t\t * @param {String} [options.sprite] Play a named sprite. Will override end, start and speed options.\r\n\t\t * @param {number} [options.speed] Override default speed, default to the Sound's speed setting.\r\n\t\t * @param {number} [options.volume] Current volume amount for instance.\r\n\t\t * @param {boolean} [options.muted] Override default muted, default to the Sound's muted setting.\r\n\t\t * @param {boolean} [options.loop] Override default loop, default to the Sound's loop setting.\r\n\t\t * @param {PIXI.sound.Sound~completeCallback} [options.complete] Callback when complete.\r\n\t\t * @param {PIXI.sound.Sound~loadedCallback} [options.loaded] If the sound isn't already preloaded, callback when\r\n\t\t *        the audio has completely finished loading and decoded.\r\n\t\t * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\r\n\t\t *        this cannot be reused after it is done playing. Returns a Promise if the sound\r\n\t\t *        has not yet loaded.\r\n\t\t */\r\n\t\tpublic play(source?: string | PlayOptions | CompleteCallback,\r\n\t\t            callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\r\n\r\n\t\t// Overloaded function\r\n\t\tpublic play(source?: any, complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance> {\r\n\t\t\tlet options: PlayOptions;\r\n\r\n\t\t\tif (typeof source === \"string\") {\r\n\t\t\t\tconst sprite: string = source as string;\r\n\t\t\t\toptions = {sprite, complete};\r\n\t\t\t}\r\n\t\t\telse if (typeof source === \"function\") {\r\n\t\t\t\toptions = {};\r\n\t\t\t\toptions.complete = source as CompleteCallback;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\toptions = source as PlayOptions;\r\n\t\t\t}\r\n\r\n\t\t\toptions = Object.assign({\r\n\t\t\t\tcomplete: null,\r\n\t\t\t\tloaded: null,\r\n\t\t\t\tsprite: null,\r\n\t\t\t\tend: null,\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tvolume: 1,\r\n\t\t\t\tspeed: 1,\r\n\t\t\t\tmuted: false,\r\n\t\t\t\tloop: false,\r\n\t\t\t}, options || {});\r\n\r\n\t\t\t// A sprite is specified, add the options\r\n\t\t\tif (options.sprite) {\r\n\t\t\t\tconst alias: string = options.sprite;\r\n\t\t\t\t// @if DEBUG\r\n\t\t\t\tconsole.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\r\n\t\t\t\t// @endif\r\n\t\t\t\tconst sprite: SoundSprite = this._sprites[alias];\r\n\t\t\t\toptions.start = sprite.start;\r\n\t\t\t\toptions.end = sprite.end;\r\n\t\t\t\toptions.speed = sprite.speed || 1;\r\n\t\t\t\tdelete options.sprite;\r\n\t\t\t}\r\n\r\n\t\t\t// @deprecated offset option\r\n\t\t\tif ((options as any).offset) {\r\n\t\t\t\toptions.start = (options as any).offset as number;\r\n\t\t\t}\r\n\r\n\t\t\t// if not yet playable, ignore\r\n\t\t\t// - usefull when the sound download isnt yet completed\r\n\t\t\tif (!this.isLoaded) {\r\n\t\t\t\treturn new Promise<IMediaInstance>((resolve, reject) => {\r\n\t\t\t\t\tthis.autoPlay = true;\r\n\t\t\t\t\tthis._autoPlayOptions = options;\r\n\t\t\t\t\tthis._preload((err: Error, sound: Sound, instance: IMediaInstance) => {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (options.loaded) {\r\n\t\t\t\t\t\t\t\toptions.loaded(err, sound, instance);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tresolve(instance);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Stop all sounds\r\n\t\t\tif (this.singleInstance) {\r\n\t\t\t\tthis._removeInstances();\r\n\t\t\t}\r\n\r\n\t\t\t// clone the bufferSource\r\n\t\t\tconst instance = this._createInstance();\r\n\t\t\tthis._instances.push(instance);\r\n\t\t\tthis.isPlaying = true;\r\n\t\t\tinstance.once(\"end\", () => {\r\n\t\t\t\tif (options.complete) {\r\n\t\t\t\t\toptions.complete(this);\r\n\t\t\t\t}\r\n\t\t\t\tthis._onComplete(instance);\r\n\t\t\t});\r\n\t\t\tinstance.once(\"stop\", () => {\r\n\t\t\t\tthis._onComplete(instance);\r\n\t\t\t});\r\n\r\n\t\t\tinstance.play(options);\r\n\r\n\t\t\treturn instance;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Internal only, speed, loop, volume change occured.\r\n\t\t * @method refresh\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic refresh(): void {\r\n\t\t\tconst len = this._instances.length;\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\tthis._instances[i].refresh();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Handle changes in paused state. Internal only.\r\n\t\t * @method refreshPaused\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic refreshPaused(): void {\r\n\t\t\tconst len = this._instances.length;\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\tthis._instances[i].refreshPaused();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets and sets the volume.\r\n\t\t * @name PIXI.sound.Sound#volume\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tpublic get volume(): number {\r\n\t\t\treturn this._volume;\r\n\t\t}\r\n\r\n\t\tpublic set volume(volume: number) {\r\n\t\t\tthis._volume = volume;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets and sets the muted flag.\r\n\t\t * @name PIXI.sound.Sound#muted\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tpublic get muted(): boolean {\r\n\t\t\treturn this._muted;\r\n\t\t}\r\n\r\n\t\tpublic set muted(muted: boolean) {\r\n\t\t\tthis._muted = muted;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets and sets the looping.\r\n\t\t * @name PIXI.sound.Sound#loop\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tpublic get loop(): boolean {\r\n\t\t\treturn this._loop;\r\n\t\t}\r\n\r\n\t\tpublic set loop(loop: boolean) {\r\n\t\t\tthis._loop = loop;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Starts the preloading of sound.\r\n\t\t * @method PIXI.sound.Sound#_preload\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _preload(callback?: LoadedCallback): void {\r\n\t\t\tthis.media.load(callback);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gets the list of instances that are currently being played of this sound.\r\n\t\t * @name PIXI.sound.Sound#instances\r\n\t\t * @type {Array<PIXI.sound.IMediaInstance>}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get instances(): IMediaInstance[] {\r\n\t\t\treturn this._instances;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the map of sprites.\r\n\t\t * @name PIXI.sound.Sound#sprites\r\n\t\t * @type {Object}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get sprites(): SoundSprites {\r\n\t\t\treturn this._sprites;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the duration of the audio in seconds.\r\n\t\t * @name PIXI.sound.Sound#duration\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tpublic get duration(): number {\r\n\t\t\treturn this.media.duration;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Auto play the first instance.\r\n\t\t * @method PIXI.sound.Sound#autoPlayStart\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic autoPlayStart(): IMediaInstance {\r\n\t\t\tlet instance: IMediaInstance;\r\n\t\t\tif (this.autoPlay) {\r\n\t\t\t\tinstance = this.play(this._autoPlayOptions) as IMediaInstance;\r\n\t\t\t}\r\n\t\t\treturn instance;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Removes all instances.\r\n\t\t * @method PIXI.sound.Sound#_removeInstances\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _removeInstances(): void {\r\n\t\t\t// destroying also stops\r\n\t\t\tfor (let i = this._instances.length - 1; i >= 0; i--) {\r\n\t\t\t\tthis._poolInstance(this._instances[i]);\r\n\t\t\t}\r\n\t\t\tthis._instances.length = 0;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Sound instance completed.\r\n\t\t * @method PIXI.sound.Sound#_onComplete\r\n\t\t * @private\r\n\t\t * @param {PIXI.sound.IMediaInstance} instance\r\n\t\t */\r\n\t\tprivate _onComplete(instance: IMediaInstance): void {\r\n\t\t\tif (this._instances) {\r\n\t\t\t\tconst index = this._instances.indexOf(instance);\r\n\t\t\t\tif (index > -1) {\r\n\t\t\t\t\tthis._instances.splice(index, 1);\r\n\t\t\t\t}\r\n\t\t\t\tthis.isPlaying = this._instances.length > 0;\r\n\t\t\t}\r\n\t\t\tthis._poolInstance(instance);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Create a new instance.\r\n\t\t * @method PIXI.sound.Sound#_createInstance\r\n\t\t * @private\r\n\t\t * @return {PIXI.sound.IMediaInstance} New instance to use\r\n\t\t */\r\n\t\tprivate _createInstance(): IMediaInstance {\r\n\t\t\tif (Sound._pool.length > 0) {\r\n\t\t\t\tconst instance: IMediaInstance = Sound._pool.pop();\r\n\t\t\t\tinstance.init(this.media);\r\n\t\t\t\treturn instance;\r\n\t\t\t}\r\n\t\t\treturn this.media.create();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Destroy/recycling the instance object.\r\n\t\t * @method PIXI.sound.Sound#_poolInstance\r\n\t\t * @private\r\n\t\t * @param {PIXI.sound.IMediaInstance} instance - Instance to recycle\r\n\t\t */\r\n\t\tprivate _poolInstance(instance: IMediaInstance): void {\r\n\t\t\tinstance.destroy();\r\n\t\t\t// Add it if it isn't already added\r\n\t\t\tif (Sound._pool.indexOf(instance) < 0) {\r\n\t\t\t\tSound._pool.push(instance);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound {\r\n\texport type SoundMap = { [id: string]: Options | string | ArrayBuffer | HTMLAudioElement };\r\n\r\n\t/**\r\n\t * Contains all of the functionality for using the **pixi-sound** library.\r\n\t * This is deisnged to play audio with WebAudio and fallback to HTML5.\r\n\t * @namespace PIXI.sound\r\n\t */\r\n\r\n\t/**\r\n\t * @description Manages the playback of sounds.\r\n\t * @class SoundLibrary\r\n\t * @memberof PIXI.sound\r\n\t * @private\r\n\t */\r\n\texport class SoundLibrary {\r\n\t\t/**\r\n\t\t * Singleton instance\r\n\t\t */\r\n\t\tpublic static instance: SoundLibrary;\r\n\r\n\t\t/**\r\n\t\t * For legacy approach for Audio. Instead of using WebAudio API\r\n\t\t * for playback of sounds, it will use HTML5 `<audio>` element.\r\n\t\t * @name PIXI.sound#_useLegacy\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _useLegacy: boolean;\r\n\r\n\t\t/**\r\n\t\t * The global context to use.\r\n\t\t * @name PIXI.sound#_context\r\n\t\t * @type {PIXI.sound.webaudio.WebAudioContext}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _context: IMediaContext;\r\n\r\n\t\t/**\r\n\t\t * The WebAudio specific context\r\n\t\t * @name PIXI.sound#_webAudioContext\r\n\t\t * @type {PIXI.sound.webaudio.WebAudioContext}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _webAudioContext: webaudio.WebAudioContext;\r\n\r\n\t\t/**\r\n\t\t * The HTML Audio (legacy) context.\r\n\t\t * @name PIXI.sound#_htmlAudioContext\r\n\t\t * @type {PIXI.sound.webaudio.WebAudioContext}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _htmlAudioContext: htmlaudio.HTMLAudioContext;\r\n\r\n\t\t/**\r\n\t\t * The map of all sounds by alias.\r\n\t\t * @name PIXI.sound#_sounds\r\n\t\t * @type {Object}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _sounds: { [id: string]: Sound };\r\n\r\n\t\tconstructor() {\r\n\t\t\tif (this.supported) {\r\n\t\t\t\tthis._webAudioContext = new webaudio.WebAudioContext();\r\n\t\t\t}\r\n\t\t\tthis._htmlAudioContext = new htmlaudio.HTMLAudioContext();\r\n\t\t\tthis._sounds = {};\r\n\t\t\tthis.useLegacy = !this.supported;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The global context to use.\r\n\t\t * @name PIXI.sound#context\r\n\t\t * @readonly\r\n\t\t * @type {PIXI.sound.IMediaContext}\r\n\t\t */\r\n\t\tpublic get context(): IMediaContext {\r\n\t\t\treturn this._context;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Initialize the singleton of the library\r\n\t\t * @method PIXI.sound.SoundLibrary.init\r\n\t\t * @return {PIXI.sound}\r\n\t\t */\r\n\t\tpublic static init(): SoundLibrary {\r\n\t\t\tif (SoundLibrary.instance) {\r\n\t\t\t\tthrow new Error(\"SoundLibrary is already created\");\r\n\t\t\t}\r\n\t\t\tconst instance = SoundLibrary.instance = new SoundLibrary();\r\n\r\n\t\t\t// Apply polyfills\r\n\t\t\t// if (typeof Object.assign === \"undefined\") {\r\n\t\t\t// \tObjectAssign.polyfill();\r\n\t\t\t// }\r\n\r\n\t\t\t// if (typeof Promise === \"undefined\") {\r\n\t\t\t// \t(window as any).Promise = PromisePolyfill;\r\n\t\t\t// }\r\n\r\n\t\t\t// In some cases loaders can be not included\r\n\t\t\t// the the bundle for PixiJS, custom builds\r\n\t\t\tif (typeof PIXI.loaders !== \"undefined\") {\r\n\t\t\t\t// Install the middleware to support\r\n\t\t\t\t// PIXI.loader and new PIXI.loaders.Loader\r\n\t\t\t\tloaders.LoaderMiddleware.install(instance);\r\n\t\t\t}\r\n\r\n\t\t\t// Remove the global namespace created by rollup\r\n\t\t\t// makes it possible for users to opt-in to exposing\r\n\t\t\t// the library globally\r\n\t\t\tif (typeof (window as any).__pixiSound === \"undefined\") {\r\n\t\t\t\tdelete (window as any).__pixiSound;\r\n\t\t\t}\r\n\r\n\t\t\t// Webpack and NodeJS-like environments will not expose\r\n\t\t\t// the library to the window by default, user must opt-in\r\n\t\t\tif (typeof module === \"undefined\") {\r\n\t\t\t\tinstance.global();\r\n\t\t\t}\r\n\r\n\t\t\treturn instance;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the `PIXI.sound` window namespace object. By default\r\n\t\t * the global namespace is disabled in environments that use\r\n\t\t * require/module (e.g. Webpack), so `PIXI.sound` would not\r\n\t\t * be accessible these environments. Window environments\r\n\t\t * will automatically expose the window object, calling this\r\n\t\t * method will do nothing.\r\n\t\t * @method PIXI.sound#global\r\n\t\t * @example\r\n\t\t * import {sound} from 'pixi-sound';\r\n\t\t * sound.global(); // Now can use PIXI.sound\r\n\t\t */\r\n\t\tpublic global(): void {\r\n\t\t\tconst PixiJS = PIXI as any;\r\n\r\n\t\t\tif (!PixiJS.sound) {\r\n\t\t\t\tObject.defineProperty(PixiJS, \"sound\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\treturn SoundLibrary.instance;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tObject.defineProperties(SoundLibrary.instance,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfilters: {\r\n\t\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\t\treturn filters;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\thtmlaudio: {\r\n\t\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\t\treturn htmlaudio;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\twebaudio: {\r\n\t\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\t\treturn webaudio;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tutils: {\r\n\t\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\t\treturn utils;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tSound: {\r\n\t\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\t\treturn Sound;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tSoundSprite: {\r\n\t\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\t\treturn SoundSprite;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tFilterable: {\r\n\t\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\t\treturn Filterable;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tSoundLibrary: {\r\n\t\t\t\t\t\t\tget () {\r\n\t\t\t\t\t\t\t\treturn SoundLibrary;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Apply filters to all sounds. Can be useful\r\n\t\t * for setting global planning or global effects.\r\n\t\t * **Only supported with WebAudio.**\r\n\t\t * @example\r\n\t\t * // Adds a filter to pan all output left\r\n\t\t * PIXI.sound.filtersAll = [\r\n\t\t *     new PIXI.sound.filters.StereoFilter(-1)\r\n\t\t * ];\r\n\t\t * @name PIXI.sound#filtersAll\r\n\t\t * @type {PIXI.sound.filters.Filter[]}\r\n\t\t */\r\n\t\tpublic get filtersAll(): Filter[] {\r\n\t\t\tif (!this.useLegacy) {\r\n\t\t\t\treturn this._context.filters;\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tpublic set filtersAll(filters: Filter[]) {\r\n\t\t\tif (!this.useLegacy) {\r\n\t\t\t\tthis._context.filters = filters;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * `true` if WebAudio is supported on the current browser.\r\n\t\t * @name PIXI.sound#supported\r\n\t\t * @readonly\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tpublic get supported(): boolean {\r\n\t\t\treturn webaudio.WebAudioContext.AudioContext !== null;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Register an existing sound with the library cache.\r\n\t\t * @method PIXI.sound#add\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @param {PIXI.sound.Sound} sound Sound reference to use.\r\n\t\t * @return {PIXI.sound.Sound} Instance of the Sound object.\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Adds a new sound by alias.\r\n\t\t * @method PIXI.sound#add\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\r\n\t\t *        or the object of options to use.\r\n\t\t * @param {String} [options.url] If `options` is an object, the source of file.\r\n\t\t * @param {ArrayBuffer|HTMLAudioElement} [options.source] If sound is already preloaded, available.\r\n\t\t * @param {boolean} [options.autoPlay=false] true to play after loading.\r\n\t\t * @param {boolean} [options.preload=false] true to immediately start preloading.\r\n\t\t * @param {boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\r\n\t\t * @param {number} [options.volume=1] The amount of volume 1 = 100%.\r\n\t\t * @param {number} [options.speed=1] The playback rate where 1 is 100% speed.\r\n\t\t * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\r\n\t\t *        with a `start` and `end`, which are the times in seconds. Optionally, can include\r\n\t\t *        a `speed` amount where 1 is 100% speed.\r\n\t\t * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback when\r\n\t\t *        play is finished.\r\n\t\t * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\r\n\t\t * @return {PIXI.sound.Sound} Instance of the Sound object.\r\n\t\t */\r\n\t\tpublic add(alias: string, options: Options | string | ArrayBuffer | HTMLAudioElement | Sound): Sound;\r\n\r\n\t\t/**\r\n\t\t * Adds multiple sounds at once.\r\n\t\t * @method PIXI.sound#add\r\n\t\t * @param {Object} map Map of sounds to add, the key is the alias, the value is the\r\n\t\t *        `string`, `ArrayBuffer`, `HTMLAudioElement` or the list of options\r\n\t\t *        (see {@link PIXI.sound.add} for options).\r\n\t\t * @param {Object} globalOptions The default options for all sounds.\r\n\t\t *        if a property is defined, it will use the local property instead.\r\n\t\t * @return {PIXI.sound.Sound} Instance to the Sound object.\r\n\t\t */\r\n\t\tpublic add(map: SoundMap, globalOptions?: Options): { [id: string]: Sound };\r\n\r\n\t\t// Actual method\r\n\t\tpublic add(source: string | SoundMap, sourceOptions?: Options | string | ArrayBuffer | HTMLAudioElement | Sound): { [id: string]: Sound } | Sound {\r\n\t\t\tif (typeof source === \"object\") {\r\n\t\t\t\tconst results: { [id: string]: Sound } = {};\r\n\r\n\t\t\t\tfor (const alias in source) {\r\n\t\t\t\t\tconst options: Options = this._getOptions(\r\n\t\t\t\t\t\tsource[alias],\r\n\t\t\t\t\t\tsourceOptions as Options,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tresults[alias] = this.add(alias, options);\r\n\t\t\t\t}\r\n\t\t\t\treturn results;\r\n\t\t\t}\r\n\t\t\telse if (typeof source === \"string\") {\r\n\t\t\t\t// @if DEBUG\r\n\t\t\t\tconsole.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\r\n\t\t\t\t// @endif\r\n\r\n\t\t\t\tif (sourceOptions instanceof Sound) {\r\n\t\t\t\t\tthis._sounds[source] = sourceOptions;\r\n\t\t\t\t\treturn sourceOptions;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst options: Options = this._getOptions(sourceOptions);\r\n\t\t\t\t\tconst sound: Sound = Sound.from(options);\r\n\t\t\t\t\tthis._sounds[source] = sound;\r\n\t\t\t\t\treturn sound;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Internal methods for getting the options object\r\n\t\t * @method PIXI.sound#_getOptions\r\n\t\t * @private\r\n\t\t * @param {string|ArrayBuffer|HTMLAudioElement|Object} source The source options\r\n\t\t * @param {Object} [overrides] Override default options\r\n\t\t * @return {Object} The construction options\r\n\t\t */\r\n\t\tprivate _getOptions(source: string | ArrayBuffer | HTMLAudioElement | Options, overrides?: Options): Options {\r\n\t\t\tlet options: Options;\r\n\r\n\t\t\tif (typeof source === \"string\") {\r\n\t\t\t\toptions = {url: source};\r\n\t\t\t}\r\n\t\t\telse if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement) {\r\n\t\t\t\toptions = {source};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\toptions = source as Options;\r\n\t\t\t}\r\n\t\t\treturn Object.assign(options, overrides || {}) as Options;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\r\n\t\t * @name PIXI.sound#useLegacy\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tpublic get useLegacy(): boolean {\r\n\t\t\treturn this._useLegacy;\r\n\t\t}\r\n\r\n\t\tpublic set useLegacy(legacy: boolean) {\r\n\t\t\tloaders.LoaderMiddleware.legacy = legacy;\r\n\t\t\tthis._useLegacy = legacy;\r\n\r\n\t\t\t// Set the context to use\r\n\t\t\tif (!legacy && this.supported) {\r\n\t\t\t\tthis._context = this._webAudioContext;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._context = this._htmlAudioContext;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Removes a sound by alias.\r\n\t\t * @method PIXI.sound#remove\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @return {PIXI.sound} Instance for chaining.\r\n\t\t */\r\n\t\tpublic remove(alias: string): SoundLibrary {\r\n\t\t\tthis.exists(alias, true);\r\n\t\t\tthis._sounds[alias].destroy();\r\n\t\t\tdelete this._sounds[alias];\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the global volume for all sounds. To set per-sound volume see {@link PIXI.sound#volume}.\r\n\t\t * @name PIXI.sound#volumeAll\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tpublic get volumeAll(): number {\r\n\t\t\treturn this._context.volume;\r\n\t\t}\r\n\r\n\t\tpublic set volumeAll(volume: number) {\r\n\t\t\tthis._context.volume = volume;\r\n\t\t\tthis._context.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the global speed for all sounds. To set per-sound speed see {@link PIXI.sound#speed}.\r\n\t\t * @name PIXI.sound#speedAll\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tpublic get speedAll(): number {\r\n\t\t\treturn this._context.speed;\r\n\t\t}\r\n\r\n\t\tpublic set speedAll(speed: number) {\r\n\t\t\tthis._context.speed = speed;\r\n\t\t\tthis._context.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Toggle paused property for all sounds.\r\n\t\t * @method PIXI.sound#togglePauseAll\r\n\t\t * @return {boolean} `true` if all sounds are paused.\r\n\t\t */\r\n\t\tpublic togglePauseAll(): boolean {\r\n\t\t\treturn this._context.togglePause();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Pauses any playing sounds.\r\n\t\t * @method PIXI.sound#pauseAll\r\n\t\t * @return {PIXI.sound} Instance for chaining.\r\n\t\t */\r\n\t\tpublic pauseAll(): SoundLibrary {\r\n\t\t\tthis._context.paused = true;\r\n\t\t\tthis._context.refresh();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Resumes any sounds.\r\n\t\t * @method PIXI.sound#resumeAll\r\n\t\t * @return {PIXI.sound} Instance for chaining.\r\n\t\t */\r\n\t\tpublic resumeAll(): SoundLibrary {\r\n\t\t\tthis._context.paused = false;\r\n\t\t\tthis._context.refresh();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Toggle muted property for all sounds.\r\n\t\t * @method PIXI.sound#toggleMuteAll\r\n\t\t * @return {boolean} `true` if all sounds are muted.\r\n\t\t */\r\n\t\tpublic toggleMuteAll(): boolean {\r\n\t\t\treturn this._context.toggleMute();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Mutes all playing sounds.\r\n\t\t * @method PIXI.sound#muteAll\r\n\t\t * @return {PIXI.sound} Instance for chaining.\r\n\t\t */\r\n\t\tpublic muteAll(): SoundLibrary {\r\n\t\t\tthis._context.muted = true;\r\n\t\t\tthis._context.refresh();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Unmutes all playing sounds.\r\n\t\t * @method PIXI.sound#unmuteAll\r\n\t\t * @return {PIXI.sound} Instance for chaining.\r\n\t\t */\r\n\t\tpublic unmuteAll(): SoundLibrary {\r\n\t\t\tthis._context.muted = false;\r\n\t\t\tthis._context.refresh();\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops and removes all sounds. They cannot be used after this.\r\n\t\t * @method PIXI.sound#removeAll\r\n\t\t * @return {PIXI.sound} Instance for chaining.\r\n\t\t */\r\n\t\tpublic removeAll(): SoundLibrary {\r\n\t\t\tfor (const alias in this._sounds) {\r\n\t\t\t\tthis._sounds[alias].destroy();\r\n\t\t\t\tdelete this._sounds[alias];\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops all sounds.\r\n\t\t * @method PIXI.sound#stopAll\r\n\t\t * @return {PIXI.sound} Instance for chaining.\r\n\t\t */\r\n\t\tpublic stopAll(): SoundLibrary {\r\n\t\t\tfor (const alias in this._sounds) {\r\n\t\t\t\tthis._sounds[alias].stop();\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Checks if a sound by alias exists.\r\n\t\t * @method PIXI.sound#exists\r\n\t\t * @param {String} alias Check for alias.\r\n\t\t * @return {boolean} true if the sound exists.\r\n\t\t */\r\n\t\tpublic exists(alias: string, assert: boolean = false): boolean {\r\n\t\t\tconst exists = !!this._sounds[alias];\r\n\t\t\tif (assert) {\r\n\t\t\t\tconsole.assert(exists, `No sound matching alias '${alias}'.`);\r\n\t\t\t}\r\n\t\t\treturn exists;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Find a sound by alias.\r\n\t\t * @method PIXI.sound#find\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @return {PIXI.sound.Sound} Sound object.\r\n\t\t */\r\n\t\tpublic find(alias: string): Sound {\r\n\t\t\tthis.exists(alias, true);\r\n\t\t\treturn this._sounds[alias];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Plays a sound.\r\n\t\t * @method PIXI.sound#play\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @param {String} sprite The alias of the sprite to play.\r\n\t\t * @return {PIXI.sound.IMediaInstance|null} The sound instance, this cannot be reused\r\n\t\t *         after it is done playing. Returns `null` if the sound has not yet loaded.\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Plays a sound.\r\n\t\t * @method PIXI.sound#play\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @param {Object|Function} options The options or callback when done.\r\n\t\t * @param {Function} [options.complete] When completed.\r\n\t\t * @param {Function} [options.loaded] If not already preloaded, callback when finishes load.\r\n\t\t * @param {number} [options.start=0] Start time offset.\r\n\t\t * @param {number} [options.end] End time offset.\r\n\t\t * @param {number} [options.speed] Override default speed, default to the Sound's speed setting.\r\n\t\t * @param {boolean} [options.loop] Override default loop, default to the Sound's loop setting.\r\n\t\t * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\r\n\t\t *        this cannot be reused after it is done playing. Returns a Promise if the sound\r\n\t\t *        has not yet loaded.\r\n\t\t */\r\n\t\tpublic play(alias: string, options?: PlayOptions | CompleteCallback | string): IMediaInstance | Promise<IMediaInstance> {\r\n\t\t\treturn this.find(alias).play(options);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops a sound.\r\n\t\t * @method PIXI.sound#stop\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @return {PIXI.sound.Sound} Sound object.\r\n\t\t */\r\n\t\tpublic stop(alias: string): Sound {\r\n\t\t\treturn this.find(alias).stop();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Pauses a sound.\r\n\t\t * @method PIXI.sound#pause\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @return {PIXI.sound.Sound} Sound object.\r\n\t\t */\r\n\t\tpublic pause(alias: string): Sound {\r\n\t\t\treturn this.find(alias).pause();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Resumes a sound.\r\n\t\t * @method PIXI.sound#resume\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @return {PIXI.sound} Instance for chaining.\r\n\t\t */\r\n\t\tpublic resume(alias: string): Sound {\r\n\t\t\treturn this.find(alias).resume();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get or set the volume for a sound.\r\n\t\t * @method PIXI.sound#volume\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @param {number} [volume] Optional current volume to set.\r\n\t\t * @return {number} The current volume.\r\n\t\t */\r\n\t\tpublic volume(alias: string, volume?: number): number {\r\n\t\t\tconst sound = this.find(alias);\r\n\t\t\tif (volume !== undefined) {\r\n\t\t\t\tsound.volume = volume;\r\n\t\t\t}\r\n\t\t\treturn sound.volume;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get or set the speed for a sound.\r\n\t\t * @method PIXI.sound#speed\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @param {number} [speed] Optional current speed to set.\r\n\t\t * @return {number} The current speed.\r\n\t\t */\r\n\t\tpublic speed(alias: string, speed?: number): number {\r\n\t\t\tconst sound = this.find(alias);\r\n\t\t\tif (speed !== undefined) {\r\n\t\t\t\tsound.speed = speed;\r\n\t\t\t}\r\n\t\t\treturn sound.speed;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the length of a sound in seconds.\r\n\t\t * @method PIXI.sound#duration\r\n\t\t * @param {String} alias The sound alias reference.\r\n\t\t * @return {number} The current duration in seconds.\r\n\t\t */\r\n\t\tpublic duration(alias: string): number {\r\n\t\t\treturn this.find(alias).duration;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Destroys the sound module.\r\n\t\t * @method PIXI.sound#destroy\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic destroy(): void {\r\n\t\t\tthis.removeAll();\r\n\t\t\tthis._sounds = null;\r\n\t\t\tthis._context = null;\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.filters {\r\n\t/**\r\n\t * Filter for adding adding delaynode.\r\n\t *\r\n\t * @class DistortionFilter\r\n\t * @memberof PIXI.sound.filters\r\n\t * @param {number} [amount=0] The amount of distoration from 0 to 1.\r\n\t */\r\n\texport class DistortionFilter extends Filter {\r\n\t\t/**\r\n\t\t * The Wave shape node use to distort\r\n\t\t * @name PIXI.sound.filters.DistortionFilter#_distortion\r\n\t\t * @type {WaveShaperNode}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _distortion: WaveShaperNode;\r\n\r\n\t\t/**\r\n\t\t * The amount of distoration\r\n\t\t * @name PIXI.sound.filters.DistortionFilter#_amount\r\n\t\t * @type {number}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _amount: number;\r\n\r\n\t\tconstructor(amount: number = 0) {\r\n\t\t\tif (SoundLibrary.instance.useLegacy) {\r\n\t\t\t\tsuper(null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst context = SoundLibrary.instance.context;\r\n\t\t\tconst distortion: WaveShaperNode = context.audioContext.createWaveShaper();\r\n\r\n\t\t\tsuper(distortion);\r\n\r\n\t\t\tthis._distortion = distortion;\r\n\r\n\t\t\tthis.amount = amount;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @name PIXI.sound.filters.Distoration#amount\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tset amount(value: number) {\r\n\t\t\tvalue *= 1000;\r\n\t\t\tthis._amount = value;\r\n\t\t\tconst samples: number = 44100;\r\n\t\t\tconst curve: Float32Array = new Float32Array(samples);\r\n\t\t\tconst deg: number = Math.PI / 180;\r\n\r\n\t\t\tlet i: number = 0;\r\n\t\t\tlet x: number;\r\n\r\n\t\t\tfor (; i < samples; ++i) {\r\n\t\t\t\tx = i * 2 / samples - 1;\r\n\t\t\t\tcurve[i] = ( 3 + value ) * x * 20 * deg / ( Math.PI + value * Math.abs(x) );\r\n\t\t\t}\r\n\t\t\tthis._distortion.curve = curve;\r\n\t\t\tthis._distortion.oversample = '4x';\r\n\t\t}\r\n\r\n\t\tget amount(): number {\r\n\t\t\treturn this._amount;\r\n\t\t}\r\n\r\n\t\tdestroy(): void {\r\n\t\t\tthis._distortion = null;\r\n\t\t\tsuper.destroy();\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.filters {\r\n\tinterface Band {\r\n\t\tf: number;\r\n\t\ttype: string;\r\n\t\tgain: number;\r\n\t}\r\n\r\n\t/**\r\n\t * Filter for adding equalizer bands.\r\n\t *\r\n\t * @class EqualizerFilter\r\n\t * @memberof PIXI.sound.filters\r\n\t * @param {number} [f32=0] Default gain for 32 Hz\r\n\t * @param {number} [f64=0] Default gain for 64 Hz\r\n\t * @param {number} [f125=0] Default gain for 125 Hz\r\n\t * @param {number} [f250=0] Default gain for 250 Hz\r\n\t * @param {number} [f500=0] Default gain for 500 Hz\r\n\t * @param {number} [f1k=0] Default gain for 1000 Hz\r\n\t * @param {number} [f2k=0] Default gain for 2000 Hz\r\n\t * @param {number} [f4k=0] Default gain for 4000 Hz\r\n\t * @param {number} [f8k=0] Default gain for 8000 Hz\r\n\t * @param {number} [f16k=0] Default gain for 16000 Hz\r\n\t */\r\n\texport class EqualizerFilter extends Filter {\r\n\t\t/**\r\n\t\t * Band at 32 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F32\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F32: number = 32;\r\n\r\n\t\t/**\r\n\t\t * Band at 64 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F64\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F64: number = 64;\r\n\r\n\t\t/**\r\n\t\t * Band at 125 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F125\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F125: number = 125;\r\n\r\n\t\t/**\r\n\t\t * Band at 250 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F250\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F250: number = 250;\r\n\r\n\t\t/**\r\n\t\t * Band at 500 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F500\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F500: number = 500;\r\n\r\n\t\t/**\r\n\t\t * Band at 1000 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F1K\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F1K: number = 1000;\r\n\r\n\t\t/**\r\n\t\t * Band at 2000 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F2K\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F2K: number = 2000;\r\n\r\n\t\t/**\r\n\t\t * Band at 4000 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F4K\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F4K: number = 4000;\r\n\r\n\t\t/**\r\n\t\t * Band at 8000 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F8K\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F8K: number = 8000;\r\n\r\n\t\t/**\r\n\t\t * Band at 16000 Hz\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter.F16K\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic static F16K: number = 16000;\r\n\r\n\t\t/**\r\n\t\t * The list of bands\r\n\t\t * @name PIXI.sounds.filters.EqualizerFilter#bands\r\n\t\t * @type {BiquadFilterNode[]}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic bands: BiquadFilterNode[];\r\n\r\n\t\t/**\r\n\t\t * The map of bands to frequency\r\n\t\t * @name PIXI.sounds.filters.EqualizerFilter#bandsMap\r\n\t\t * @type {Object}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic bandsMap: { [id: number]: BiquadFilterNode };\r\n\r\n\t\tconstructor(f32: number = 0, f64: number = 0, f125: number = 0, f250: number = 0, f500: number = 0,\r\n\t\t            f1k: number = 0, f2k: number = 0, f4k: number = 0, f8k: number = 0, f16k: number = 0) {\r\n\t\t\tif (SoundLibrary.instance.useLegacy) {\r\n\t\t\t\tsuper(null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst equalizerBands: Band[] = [\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F32,\r\n\t\t\t\t\ttype: 'lowshelf',\r\n\t\t\t\t\tgain: f32\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F64,\r\n\t\t\t\t\ttype: 'peaking',\r\n\t\t\t\t\tgain: f64\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F125,\r\n\t\t\t\t\ttype: 'peaking',\r\n\t\t\t\t\tgain: f125\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F250,\r\n\t\t\t\t\ttype: 'peaking',\r\n\t\t\t\t\tgain: f250\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F500,\r\n\t\t\t\t\ttype: 'peaking',\r\n\t\t\t\t\tgain: f500\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F1K,\r\n\t\t\t\t\ttype: 'peaking',\r\n\t\t\t\t\tgain: f1k\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F2K,\r\n\t\t\t\t\ttype: 'peaking',\r\n\t\t\t\t\tgain: f2k\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F4K,\r\n\t\t\t\t\ttype: 'peaking',\r\n\t\t\t\t\tgain: f4k\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F8K,\r\n\t\t\t\t\ttype: 'peaking',\r\n\t\t\t\t\tgain: f8k\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tf: EqualizerFilter.F16K,\r\n\t\t\t\t\ttype: 'highshelf',\r\n\t\t\t\t\tgain: f16k\r\n\t\t\t\t}\r\n\t\t\t];\r\n\r\n\t\t\tconst bands: BiquadFilterNode[] = equalizerBands.map(function (band: Band) {\r\n\t\t\t\tconst filter: BiquadFilterNode = SoundLibrary.instance.context.audioContext.createBiquadFilter();\r\n\t\t\t\tfilter.type = band.type as BiquadFilterType;\r\n\t\t\t\tfilter.gain.value = band.gain;\r\n\t\t\t\tfilter.Q.value = 1;\r\n\t\t\t\tfilter.frequency.value = band.f;\r\n\t\t\t\treturn filter;\r\n\t\t\t});\r\n\r\n\t\t\t// Setup the constructor AudioNode, where first is the input, and last is the output\r\n\t\t\tsuper(bands[0], bands[bands.length - 1]);\r\n\r\n\t\t\t// Manipulate the bands\r\n\t\t\tthis.bands = bands;\r\n\r\n\t\t\t// Create a map\r\n\t\t\tthis.bandsMap = {};\r\n\r\n\t\t\tfor (let i = 0; i < this.bands.length; i++) {\r\n\t\t\t\tconst node: BiquadFilterNode = this.bands[i];\r\n\r\n\t\t\t\t// Connect the previous band to the current one\r\n\t\t\t\tif (i > 0) {\r\n\t\t\t\t\tthis.bands[i - 1].connect(node);\r\n\t\t\t\t}\r\n\t\t\t\tthis.bandsMap[node.frequency.value] = node;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set gain on a specific frequency.\r\n\t\t * @method PIXI.sound.filters.EqualizerFilter#setGain\r\n\t\t * @param {number} frequency The frequency, see EqualizerFilter.F* for bands\r\n\t\t * @param {number} [gain=0] Recommended -40 to 40.\r\n\t\t */\r\n\t\tsetGain(frequency: number, gain: number = 0): void {\r\n\t\t\tif (!this.bandsMap[frequency]) {\r\n\t\t\t\tthrow 'No band found for frequency ' + frequency;\r\n\t\t\t}\r\n\t\t\tthis.bandsMap[frequency].gain.value = gain;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get gain amount on a specific frequency.\r\n\t\t * @method PIXI.sound.filters.EqualizerFilter#getGain\r\n\t\t * @return {number} The amount of gain set.\r\n\t\t */\r\n\t\tgetGain(frequency: number): number {\r\n\t\t\tif (!this.bandsMap[frequency]) {\r\n\t\t\t\tthrow 'No band found for frequency ' + frequency;\r\n\t\t\t}\r\n\t\t\treturn this.bandsMap[frequency].gain.value;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 32 Hz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f32\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f32(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F32, value);\r\n\t\t}\r\n\r\n\t\tpublic get f32(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F32);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 64 Hz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f64\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f64(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F64, value);\r\n\t\t}\r\n\r\n\t\tpublic get f64(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F64);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 125 Hz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f125\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f125(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F125, value);\r\n\t\t}\r\n\r\n\t\tpublic get f125(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F125);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 250 Hz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f250\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f250(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F250, value);\r\n\t\t}\r\n\r\n\t\tpublic get f250(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F250);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 500 Hz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f500\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f500(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F500, value);\r\n\t\t}\r\n\r\n\t\tpublic get f500(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F500);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 1 KHz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f1k\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f1k(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F1K, value);\r\n\t\t}\r\n\r\n\t\tpublic get f1k(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F1K);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 2 KHz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f2k\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f2k(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F2K, value);\r\n\t\t}\r\n\r\n\t\tpublic get f2k(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F2K);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 4 KHz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f4k\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f4k(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F4K, value);\r\n\t\t}\r\n\r\n\t\tpublic get f4k(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F4K);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 8 KHz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f8k\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f8k(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F8K, value);\r\n\t\t}\r\n\r\n\t\tpublic get f8k(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F8K);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Gain at 16 KHz frequencey.\r\n\t\t * @name PIXI.sound.filters.EqualizerFilter#f16k\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tpublic set f16k(value: number) {\r\n\t\t\tthis.setGain(EqualizerFilter.F16K, value);\r\n\t\t}\r\n\r\n\t\tpublic get f16k(): number {\r\n\t\t\treturn this.getGain(EqualizerFilter.F16K);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Reset all frequency bands to have gain of 0\r\n\t\t * @method PIXI.sound.filters.EqualizerFilter#reset\r\n\t\t */\r\n\t\treset(): void {\r\n\t\t\tthis.bands.forEach((band: BiquadFilterNode) => {\r\n\t\t\t\tband.gain.value = 0;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tdestroy(): void {\r\n\t\t\tthis.bands.forEach((band: BiquadFilterNode) => {\r\n\t\t\t\tband.disconnect();\r\n\t\t\t});\r\n\t\t\tthis.bands = null;\r\n\t\t\tthis.bandsMap = null;\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.filters {\r\n\r\n\t/**\r\n\t * Combine all channels into mono channel.\r\n\t *\r\n\t * @class MonoFilter\r\n\t * @memberof PIXI.sound.filters\r\n\t */\r\n\texport default class MonoFilter extends Filter {\r\n\t\t/**\r\n\t\t * Merger node\r\n\t\t * @name PIXI.sound.filters.MonoFilter#_merge\r\n\t\t * @type {ChannelMergerNode}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _merger: ChannelMergerNode;\r\n\r\n\t\tconstructor() {\r\n\t\t\tif (SoundLibrary.instance.useLegacy) {\r\n\t\t\t\tsuper(null);\r\n\t\t\t}\r\n\t\t\tconst audioContext: AudioContext = SoundLibrary.instance.context.audioContext;\r\n\t\t\tconst splitter: ChannelSplitterNode = audioContext.createChannelSplitter();\r\n\t\t\tconst merger: ChannelMergerNode = audioContext.createChannelMerger();\r\n\t\t\tmerger.connect(splitter);\r\n\t\t\tsuper(merger, splitter);\r\n\t\t\tthis._merger = merger;\r\n\t\t}\r\n\r\n\t\tpublic destroy(): void {\r\n\t\t\tthis._merger.disconnect();\r\n\t\t\tthis._merger = null;\r\n\t\t\tsuper.destroy();\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.filters {\r\n\t/**\r\n\t * Filter for adding reverb. Refactored from\r\n\t * https://github.com/web-audio-components/simple-reverb/\r\n\t *\r\n\t * @class ReverbFilter\r\n\t * @memberof PIXI.sound.filters\r\n\t * @param {number} [seconds=3] Seconds for reverb\r\n\t * @param {number} [decay=2] The decay length\r\n\t * @param {boolean} [reverse=false] Reverse reverb\r\n\t */\r\n\texport class ReverbFilter extends Filter {\r\n\t\t/**\r\n\t\t * The covolver node\r\n\t\t * @name PIXI.sound.filters.ReverbFilter#_convolver\r\n\t\t * @type {ConvolverNode}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _convolver: ConvolverNode;\r\n\r\n\t\t/**\r\n\t\t * @name PIXI.sound.filters.ReverbFilter#_seconds\r\n\t\t * @type {number}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _seconds: number;\r\n\r\n\t\t/**\r\n\t\t * @name PIXI.sound.filters.ReverbFilter#_decay\r\n\t\t * @type {number}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _decay: number;\r\n\r\n\t\t/**\r\n\t\t * @name PIXI.sound.filters.ReverbFilter#_reverse\r\n\t\t * @type {number}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _reverse: boolean;\r\n\r\n\t\tconstructor(seconds: number = 3, decay: number = 2, reverse: boolean = false) {\r\n\t\t\tif (SoundLibrary.instance.useLegacy) {\r\n\t\t\t\tsuper(null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst convolver: ConvolverNode = SoundLibrary.instance.context.audioContext.createConvolver();\r\n\r\n\t\t\tsuper(convolver);\r\n\r\n\t\t\tthis._convolver = convolver;\r\n\t\t\tthis._seconds = this._clamp(seconds, 1, 50);\r\n\t\t\tthis._decay = this._clamp(decay, 0, 100);\r\n\t\t\tthis._reverse = reverse;\r\n\t\t\tthis._rebuild();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Clamp a value\r\n\t\t * @method PIXI.sound.filters.ReverbFilter#_clamp\r\n\t\t * @private\r\n\t\t * @param {number} value\r\n\t\t * @param {number} min Minimum value\r\n\t\t * @param {number} max Maximum value\r\n\t\t * @return {number} Clamped number\r\n\t\t */\r\n\t\tprivate _clamp(value: number, min: number, max: number): number {\r\n\t\t\treturn Math.min(max, Math.max(min, value));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Length of reverb in seconds from 1 to 50\r\n\t\t * @name PIXI.sound.filters.ReverbFilter#decay\r\n\t\t * @type {number}\r\n\t\t * @default 3\r\n\t\t */\r\n\t\tget seconds(): number {\r\n\t\t\treturn this._seconds;\r\n\t\t}\r\n\r\n\t\tset seconds(seconds: number) {\r\n\t\t\tthis._seconds = this._clamp(seconds, 1, 50);\r\n\t\t\tthis._rebuild();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Decay value from 0 to 100\r\n\t\t * @name PIXI.sound.filters.ReverbFilter#decay\r\n\t\t * @type {number}\r\n\t\t * @default 2\r\n\t\t */\r\n\t\tget decay(): number {\r\n\t\t\treturn this._decay;\r\n\t\t}\r\n\r\n\t\tset decay(decay: number) {\r\n\t\t\tthis._decay = this._clamp(decay, 0, 100);\r\n\t\t\tthis._rebuild();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Reverse value from 0 to 1\r\n\t\t * @name PIXI.sound.filters.ReverbFilter#reverse\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tget reverse(): boolean {\r\n\t\t\treturn this._reverse;\r\n\t\t}\r\n\r\n\t\tset reverse(reverse: boolean) {\r\n\t\t\tthis._reverse = reverse;\r\n\t\t\tthis._rebuild();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Utility function for building an impulse response\r\n\t\t * from the module parameters.\r\n\t\t * @method PIXI.sound.filters.ReverbFilter#_rebuild\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _rebuild(): void {\r\n\t\t\tconst context = SoundLibrary.instance.context.audioContext;\r\n\t\t\tconst rate: number = context.sampleRate;\r\n\t\t\tconst length: number = rate * this._seconds;\r\n\t\t\tconst impulse: AudioBuffer = context.createBuffer(2, length, rate);\r\n\t\t\tconst impulseL: Float32Array = impulse.getChannelData(0);\r\n\t\t\tconst impulseR: Float32Array = impulse.getChannelData(1);\r\n\t\t\tlet n: number;\r\n\r\n\t\t\tfor (let i: number = 0; i < length; i++) {\r\n\t\t\t\tn = this._reverse ? length - i : i;\r\n\t\t\t\timpulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\r\n\t\t\t\timpulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\r\n\t\t\t}\r\n\t\t\tthis._convolver.buffer = impulse;\r\n\t\t}\r\n\r\n\t\tdestroy(): void {\r\n\t\t\tthis._convolver = null;\r\n\t\t\tsuper.destroy();\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.filters {\r\n\t/**\r\n\t * Filter for adding Stereo panning.\r\n\t *\r\n\t * @class StereoFilter\r\n\t * @memberof PIXI.sound.filters\r\n\t * @param {number} [pan=0] The amount of panning, -1 is left, 1 is right, 0 is centered.\r\n\t */\r\n\texport class StereoFilter extends Filter {\r\n\t\t/**\r\n\t\t * The stereo panning node\r\n\t\t * @name PIXI.sound.filters.StereoFilter#_stereo\r\n\t\t * @type {StereoPannerNode}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _stereo: StereoPannerNode;\r\n\r\n\t\t/**\r\n\t\t * The stereo panning node\r\n\t\t * @name PIXI.sound.filters.StereoFilter#_panner\r\n\t\t * @type {PannerNode}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _panner: PannerNode;\r\n\r\n\t\t/**\r\n\t\t * The amount of panning, -1 is left, 1 is right, 0 is centered\r\n\t\t * @name PIXI.sound.filters.StereoFilter#_pan\r\n\t\t * @type {number}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _pan: number;\r\n\r\n\t\tconstructor(pan: number = 0) {\r\n\t\t\tif (SoundLibrary.instance.useLegacy) {\r\n\t\t\t\tsuper(null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet stereo: StereoPannerNode;\r\n\t\t\tlet panner: PannerNode;\r\n\t\t\tlet destination: AudioNode;\r\n\t\t\tconst audioContext = SoundLibrary.instance.context.audioContext;\r\n\r\n\t\t\tif (audioContext.createStereoPanner) {\r\n\t\t\t\tstereo = audioContext.createStereoPanner();\r\n\t\t\t\tdestination = stereo;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpanner = audioContext.createPanner();\r\n\t\t\t\tpanner.panningModel = 'equalpower';\r\n\t\t\t\tdestination = panner;\r\n\t\t\t}\r\n\r\n\t\t\tsuper(destination);\r\n\r\n\t\t\tthis._stereo = stereo;\r\n\t\t\tthis._panner = panner;\r\n\r\n\t\t\tthis.pan = pan;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the amount of panning, where -1 is left, 1 is right, and 0 is centered\r\n\t\t * @name PIXI.sound.filters.StereoFilter#pan\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tset pan(value: number) {\r\n\t\t\tthis._pan = value;\r\n\t\t\tif (this._stereo) {\r\n\t\t\t\tthis._stereo.pan.value = value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._panner.setPosition(value, 0, 1 - Math.abs(value));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tget pan(): number {\r\n\t\t\treturn this._pan;\r\n\t\t}\r\n\r\n\t\tdestroy(): void {\r\n\t\t\tsuper.destroy();\r\n\t\t\tthis._stereo = null;\r\n\t\t\tthis._panner = null;\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.filters {\r\n\t/**\r\n\t * Creates a telephone-sound filter.\r\n\t *\r\n\t * @class TelephoneFilter\r\n\t * @memberof PIXI.sound.filters\r\n\t */\r\n\texport class TelephoneFilter extends Filter {\r\n\t\tconstructor() {\r\n\t\t\tif (SoundLibrary.instance.useLegacy) {\r\n\t\t\t\tsuper(null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst {audioContext} = SoundLibrary.instance.context;\r\n\t\t\tconst lpf1 = audioContext.createBiquadFilter();\r\n\t\t\tconst lpf2 = audioContext.createBiquadFilter();\r\n\t\t\tconst hpf1 = audioContext.createBiquadFilter();\r\n\t\t\tconst hpf2 = audioContext.createBiquadFilter();\r\n\r\n\t\t\tlpf1.type = 'lowpass';\r\n\t\t\tlpf1.frequency.value = 2000.0;\r\n\r\n\t\t\tlpf2.type = 'lowpass';\r\n\t\t\tlpf2.frequency.value = 2000.0;\r\n\r\n\t\t\thpf1.type = 'highpass';\r\n\t\t\thpf1.frequency.value = 500.0;\r\n\r\n\t\t\thpf2.type = 'highpass';\r\n\t\t\thpf2.frequency.value = 500.0;\r\n\r\n\t\t\tlpf1.connect(lpf2);\r\n\t\t\tlpf2.connect(hpf1);\r\n\t\t\thpf1.connect(hpf2);\r\n\r\n\t\t\tsuper(lpf1, hpf2);\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.htmlaudio {\r\n\r\n\r\n\t/**\r\n\t * The fallback version of WebAudioContext which uses `<audio>` instead of WebAudio API.\r\n\t * @private\r\n\t * @class HTMLAudioContext\r\n\t * @extends PIXI.util.EventEmitter\r\n\t * @memberof PIXI.sound.htmlaudio\r\n\t */\r\n\texport class HTMLAudioContext extends PIXI.utils.EventEmitter implements IMediaContext {\r\n\t\t/**\r\n\t\t * Current global speed from 0 to 1\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioContext#speed\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tpublic speed: number;\r\n\r\n\t\t/**\r\n\t\t * Current muted status of the context\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioContext#muted\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tpublic muted: boolean;\r\n\r\n\t\t/**\r\n\t\t * Current volume from 0 to 1\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioContext#volume\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tpublic volume: number;\r\n\r\n\t\t/**\r\n\t\t * Current paused status\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioContext#paused\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tpublic paused: boolean;\r\n\r\n\t\tconstructor() {\r\n\t\t\tsuper();\r\n\r\n\t\t\tthis.speed = 1;\r\n\t\t\tthis.volume = 1;\r\n\t\t\tthis.muted = false;\r\n\t\t\tthis.paused = false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Internal trigger when volume, mute or speed changes\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioContext#refresh\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic refresh(): void {\r\n\t\t\tthis.emit('refresh');\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Internal trigger paused changes\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioContext#refreshPaused\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic refreshPaused(): void {\r\n\t\t\tthis.emit('refreshPaused');\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * HTML Audio does not support filters, this is non-functional API.\r\n\t\t * @type {Array<PIXI.sound.filters.Filter>}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioContext#filters\r\n\t\t * @default null\r\n\t\t */\r\n\t\tpublic get filters(): Filter[] {\r\n\t\t\t// @if DEBUG\r\n\t\t\tconsole.warn('HTML Audio does not support filters');\r\n\t\t\t// @endif\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tpublic set filters(filters: Filter[]) {\r\n\t\t\t// @if DEBUG\r\n\t\t\tconsole.warn('HTML Audio does not support filters');\r\n\t\t\t// @endif\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * HTML Audio does not support `audioContext`\r\n\t\t * @type {null}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioContext#audioContext\r\n\t\t * @default null\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get audioContext(): AudioContext {\r\n\t\t\t// @if DEBUG\r\n\t\t\tconsole.warn('HTML Audio does not support audioContext');\r\n\t\t\t// @endif\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Toggles the muted state.\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioContext#toggleMute\r\n\t\t * @return {boolean} The current muted state.\r\n\t\t */\r\n\t\tpublic toggleMute(): boolean {\r\n\t\t\tthis.muted = !this.muted;\r\n\t\t\tthis.refresh();\r\n\t\t\treturn this.muted;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Toggles the paused state.\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioContext#togglePause\r\n\t\t * @return {boolean} The current paused state.\r\n\t\t */\r\n\t\tpublic togglePause(): boolean {\r\n\t\t\tthis.paused = !this.paused;\r\n\t\t\tthis.refreshPaused();\r\n\t\t\treturn this.paused;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Destroy and don't use after this\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioContext#destroy\r\n\t\t */\r\n\t\tpublic destroy(): void {\r\n\t\t\tthis.removeAllListeners();\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.htmlaudio {\r\n\tlet id = 0;\r\n\r\n\t/**\r\n\t * Instance which wraps the `<audio>` element playback.\r\n\t * @private\r\n\t * @class HTMLAudioInstance\r\n\t * @memberof PIXI.sound.htmlaudio\r\n\t */\r\n\texport class HTMLAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance {\r\n\t\t/**\r\n\t\t * Extra padding, in seconds, to deal with low-latecy of HTMLAudio.\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance.PADDING\r\n\t\t * @readonly\r\n\t\t * @default 0.1\r\n\t\t */\r\n\t\tpublic static PADDING: number = 0.1;\r\n\r\n\t\t/**\r\n\t\t * The current unique ID for this instance.\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#id\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic id: number;\r\n\r\n\t\t/**\r\n\t\t * The instance of the Audio element.\r\n\t\t * @type {HTMLAudioElement}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_source\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _source: HTMLAudioElement;\r\n\r\n\t\t/**\r\n\t\t * The instance of the Audio media element.\r\n\t\t * @type {PIXI.sound.htmlaudio.HTMLAudioMedia}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_media\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _media: HTMLAudioMedia;\r\n\r\n\t\t/**\r\n\t\t * Playback rate, where 1 is 100%.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_end\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _end: number;\r\n\r\n\t\t/**\r\n\t\t * Current instance paused state.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_paused\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _paused: boolean;\r\n\r\n\t\t/**\r\n\t\t * Current instance muted state.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_muted\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _muted: boolean;\r\n\r\n\t\t/**\r\n\t\t * Current actual paused state.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_pausedReal\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _pausedReal: boolean;\r\n\r\n\t\t/**\r\n\t\t * Total length of the audio.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_duration\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _duration: number;\r\n\r\n\t\t/**\r\n\t\t * Playback rate, where 1 is 100%.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_start\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _start: number;\r\n\r\n\t\t/**\r\n\t\t * `true` if the audio is actually playing.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_playing\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _playing: boolean;\r\n\r\n\t\t/**\r\n\t\t * Volume for the instance.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_volume\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _volume: number;\r\n\r\n\t\t/**\r\n\t\t * Speed for the instance.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_speed\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _speed: number;\r\n\r\n\t\t/**\r\n\t\t * `true` for looping the playback\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_loop\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _loop: boolean;\r\n\r\n\t\tconstructor(parent: HTMLAudioMedia) {\r\n\t\t\tsuper();\r\n\r\n\t\t\tthis.id = id++;\r\n\r\n\t\t\tthis.init(parent);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The current playback progress from 0 to 1.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#progress\r\n\t\t */\r\n\t\tpublic get progress(): number {\r\n\t\t\tconst {currentTime} = this._source;\r\n\t\t\treturn currentTime / this._duration;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Pauses the sound.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.htmlaudio.HTMLAudioInstance#paused\r\n\t\t */\r\n\t\tpublic get paused(): boolean {\r\n\t\t\treturn this._paused;\r\n\t\t}\r\n\r\n\t\tpublic set paused(paused: boolean) {\r\n\t\t\tthis._paused = paused;\r\n\t\t\tthis.refreshPaused();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Reference: http://stackoverflow.com/a/40370077\r\n\t\t */\r\n\t\tprivate _onPlay(): void {\r\n\t\t\tthis._playing = true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Reference: http://stackoverflow.com/a/40370077\r\n\t\t */\r\n\t\tprivate _onPause(): void {\r\n\t\t\tthis._playing = false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Initialize the instance.\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#init\r\n\t\t * @param {PIXI.sound.htmlaudio.HTMLAudioMedia} media\r\n\t\t */\r\n\t\tpublic init(media: HTMLAudioMedia): void {\r\n\t\t\tthis._playing = false;\r\n\t\t\tthis._duration = media.source.duration;\r\n\t\t\tconst source = this._source = media.source.cloneNode(false) as HTMLAudioElement;\r\n\t\t\tsource.src = media.parent.url;\r\n\t\t\tsource.onplay = this._onPlay.bind(this);\r\n\t\t\tsource.onpause = this._onPause.bind(this);\r\n\t\t\tmedia.context.on('refresh', this.refresh, this);\r\n\t\t\tmedia.context.on('refreshPaused', this.refreshPaused, this);\r\n\t\t\tthis._media = media;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stop the sound playing\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_internalStop\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _internalStop(): void {\r\n\t\t\tif (this._source && this._playing) {\r\n\t\t\t\tthis._source.onended = null;\r\n\t\t\t\tthis._source.pause();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stop the sound playing\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#stop\r\n\t\t */\r\n\t\tpublic stop(): void {\r\n\t\t\tthis._internalStop();\r\n\r\n\t\t\tif (this._source) {\r\n\t\t\t\tthis.emit(\"stop\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the instance speed from 0 to 1\r\n\t\t * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#speed\r\n\t\t */\r\n\t\tpublic get speed(): number {\r\n\t\t\treturn this._speed;\r\n\t\t}\r\n\r\n\t\tpublic set speed(speed: number) {\r\n\t\t\tthis._speed = speed;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the set the volume for this instance from 0 to 1\r\n\t\t * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#volume\r\n\t\t */\r\n\t\tpublic get volume(): number {\r\n\t\t\treturn this._volume;\r\n\t\t}\r\n\r\n\t\tpublic set volume(volume: number) {\r\n\t\t\tthis._volume = volume;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * If the sound instance should loop playback\r\n\t\t * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#loop\r\n\t\t */\r\n\t\tpublic get loop(): boolean {\r\n\t\t\treturn this._loop;\r\n\t\t}\r\n\r\n\t\tpublic set loop(loop: boolean) {\r\n\t\t\tthis._loop = loop;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * `true` if the sound is muted\r\n\t\t * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#muted\r\n\t\t */\r\n\t\tpublic get muted(): boolean {\r\n\t\t\treturn this._muted;\r\n\t\t}\r\n\r\n\t\tpublic set muted(muted: boolean) {\r\n\t\t\tthis._muted = muted;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Call whenever the loop, speed or volume changes\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#refresh\r\n\t\t */\r\n\t\tpublic refresh(): void {\r\n\t\t\tconst global = this._media.context;\r\n\t\t\tconst sound = this._media.parent;\r\n\r\n\t\t\t// Update the looping\r\n\t\t\tthis._source.loop = this._loop || sound.loop;\r\n\r\n\t\t\t// Update the volume\r\n\t\t\tconst globalVolume = global.volume * (global.muted ? 0 : 1);\r\n\t\t\tconst soundVolume = sound.volume * (sound.muted ? 0 : 1);\r\n\t\t\tconst instanceVolume = this._volume * (this._muted ? 0 : 1);\r\n\t\t\tthis._source.volume = instanceVolume * globalVolume * soundVolume;\r\n\r\n\t\t\t// Update the speed\r\n\t\t\tthis._source.playbackRate = this._speed * global.speed * sound.speed;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Handle changes in paused state, either globally or sound or instance\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#refreshPaused\r\n\t\t */\r\n\t\tpublic refreshPaused(): void {\r\n\t\t\tconst global = this._media.context;\r\n\t\t\tconst sound = this._media.parent;\r\n\r\n\t\t\t// Handle the paused state\r\n\t\t\tconst pausedReal = this._paused || sound.paused || global.paused;\r\n\r\n\t\t\tif (pausedReal !== this._pausedReal) {\r\n\t\t\t\tthis._pausedReal = pausedReal;\r\n\r\n\t\t\t\tif (pausedReal) {\r\n\t\t\t\t\tthis._internalStop();\r\n\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * The sound is paused.\r\n\t\t\t\t\t * @event PIXI.sound.htmlaudio.HTMLAudioInstance#paused\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.emit(\"paused\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * The sound is unpaused.\r\n\t\t\t\t\t * @event PIXI.sound.htmlaudio.HTMLAudioInstance#resumed\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.emit(\"resumed\");\r\n\r\n\t\t\t\t\t// resume the playing with offset\r\n\t\t\t\t\tthis.play({\r\n\t\t\t\t\t\tstart: this._source.currentTime,\r\n\t\t\t\t\t\tend: this._end,\r\n\t\t\t\t\t\tvolume: this._volume,\r\n\t\t\t\t\t\tspeed: this._speed,\r\n\t\t\t\t\t\tloop: this._loop\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The sound is paused or unpaused.\r\n\t\t\t\t * @event PIXI.sound.htmlaudio.HTMLAudioInstance#pause\r\n\t\t\t\t * @property {boolean} paused If the instance was paused or not.\r\n\t\t\t\t */\r\n\t\t\t\tthis.emit(\"pause\", pausedReal);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Start playing the sound/\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#play\r\n\t\t */\r\n\t\tpublic play(options: PlayOptions): void {\r\n\t\t\tconst {start, end, speed, loop, volume, muted} = options;\r\n\r\n\t\t\t// @if DEBUG\r\n\t\t\tif (end) {\r\n\t\t\t\tconsole.assert(end > start, \"End time is before start time\");\r\n\t\t\t}\r\n\t\t\t// @endif\r\n\r\n\t\t\tthis._speed = speed;\r\n\t\t\tthis._volume = volume;\r\n\t\t\tthis._loop = !!loop;\r\n\t\t\tthis._muted = muted;\r\n\t\t\tthis.refresh();\r\n\r\n\t\t\t// WebAudio doesn't support looping when a duration is set\r\n\t\t\t// we'll set this just for the heck of it\r\n\t\t\tif (this.loop && end !== null) {\r\n\t\t\t\t// @if DEBUG\r\n\t\t\t\tconsole.warn('Looping not support when specifying an \"end\" time');\r\n\t\t\t\t// @endif\r\n\t\t\t\tthis.loop = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis._start = start;\r\n\t\t\tthis._end = end || this._duration;\r\n\r\n\t\t\t// Lets expand the start and end a little\r\n\t\t\t// to deal with the low-latecy of playing audio this way\r\n\t\t\t// this is a little fudge-factor\r\n\t\t\tthis._start = Math.max(0, this._start - HTMLAudioInstance.PADDING);\r\n\t\t\tthis._end = Math.min(this._end + HTMLAudioInstance.PADDING, this._duration);\r\n\r\n\t\t\tthis._source.onloadedmetadata = () => {\r\n\t\t\t\tif (this._source) {\r\n\t\t\t\t\tthis._source.currentTime = start;\r\n\t\t\t\t\tthis._source.onloadedmetadata = null;\r\n\t\t\t\t\tthis.emit(\"progress\", start, this._duration);\r\n\t\t\t\t\tPIXI.ticker.shared.add(this._onUpdate, this);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tthis._source.onended = this._onComplete.bind(this);\r\n\t\t\tthis._source.play();\r\n\r\n\t\t\t/**\r\n\t\t\t * The sound is started.\r\n\t\t\t * @event PIXI.sound.htmlaudio.HTMLAudioInstance#start\r\n\t\t\t */\r\n\t\t\tthis.emit(\"start\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Handle time update on sound.\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onUpdate\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _onUpdate(): void {\r\n\t\t\tthis.emit(\"progress\", this.progress, this._duration);\r\n\t\t\tif (this._source.currentTime >= this._end && !this._source.loop) {\r\n\t\t\t\tthis._onComplete();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Callback when completed.\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onComplete\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _onComplete(): void {\r\n\t\t\tPIXI.ticker.shared.remove(this._onUpdate, this);\r\n\t\t\tthis._internalStop();\r\n\t\t\tthis.emit(\"progress\", 1, this._duration);\r\n\t\t\t/**\r\n\t\t\t * The sound ends, don't use after this\r\n\t\t\t * @event PIXI.sound.htmlaudio.HTMLAudioInstance#end\r\n\t\t\t */\r\n\t\t\tthis.emit(\"end\", this);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Don't use after this.\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#destroy\r\n\t\t */\r\n\t\tpublic destroy(): void {\r\n\t\t\tPIXI.ticker.shared.remove(this._onUpdate, this);\r\n\t\t\tthis.removeAllListeners();\r\n\r\n\t\t\tconst source = this._source;\r\n\r\n\t\t\tif (source) {\r\n\t\t\t\t// Remove the listeners\r\n\t\t\t\tsource.onended = null;\r\n\t\t\t\tsource.onplay = null;\r\n\t\t\t\tsource.onpause = null;\r\n\r\n\t\t\t\tthis._internalStop();\r\n\t\t\t}\r\n\r\n\t\t\tthis._source = null;\r\n\t\t\tthis._speed = 1;\r\n\t\t\tthis._volume = 1;\r\n\t\t\tthis._loop = false;\r\n\t\t\tthis._end = null;\r\n\t\t\tthis._start = 0;\r\n\t\t\tthis._duration = 0;\r\n\t\t\tthis._playing = false;\r\n\t\t\tthis._pausedReal = false;\r\n\t\t\tthis._paused = false;\r\n\t\t\tthis._muted = false;\r\n\r\n\t\t\tif (this._media) {\r\n\t\t\t\tthis._media.context.off('refresh', this.refresh, this);\r\n\t\t\t\tthis._media.context.off('refreshPaused', this.refreshPaused, this);\r\n\t\t\t\tthis._media = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * To string method for instance.\r\n\t\t * @method PIXI.sound.htmlaudio.HTMLAudioInstance#toString\r\n\t\t * @return {String} The string representation of instance.\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic toString(): string {\r\n\t\t\treturn \"[HTMLAudioInstance id=\" + this.id + \"]\";\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.htmlaudio {\r\n\t/**\r\n\t * The fallback version of Sound which uses `<audio>` instead of WebAudio API.\r\n\t * @private\r\n\t * @class HTMLAudioMedia\r\n\t * @memberof PIXI.sound.htmlaudio\r\n\t * @param {HTMLAudioElement|String|Object} options Either the path or url to the source file.\r\n\t *        or the object of options to use. See {@link PIXI.sound.Sound.from}\r\n\t */\r\n\texport class HTMLAudioMedia extends PIXI.utils.EventEmitter implements IMedia {\r\n\t\tpublic parent: Sound;\r\n\t\tprivate _source: HTMLAudioElement;\r\n\r\n\t\tinit(parent: Sound): void {\r\n\t\t\tthis.parent = parent;\r\n\t\t\tthis._source = parent.options.source as HTMLAudioElement || new Audio();\r\n\t\t\tif (parent.url) {\r\n\t\t\t\tthis._source.src = parent.url;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Implement create\r\n\t\tpublic create(): HTMLAudioInstance {\r\n\t\t\treturn new HTMLAudioInstance(this);\r\n\t\t}\r\n\r\n\t\t// Implement isPlayable\r\n\t\tpublic get isPlayable(): boolean {\r\n\t\t\treturn !!this._source && this._source.readyState === 4;\r\n\t\t}\r\n\r\n\t\t// Implement duration\r\n\t\tpublic get duration(): number {\r\n\t\t\treturn this._source.duration;\r\n\t\t}\r\n\r\n\t\t// Implement context\r\n\t\tpublic get context(): HTMLAudioContext {\r\n\t\t\treturn this.parent.context as HTMLAudioContext;\r\n\t\t}\r\n\r\n\t\t// Implement filters\r\n\t\tpublic get filters(): Filter[] {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tpublic set filters(filters: Filter[]) {\r\n\t\t\t// @if DEBUG\r\n\t\t\tconsole.warn('HTML Audio does not support filters');\r\n\t\t\t// @endif\r\n\t\t}\r\n\r\n\t\t// Override the destroy\r\n\t\tpublic destroy(): void {\r\n\t\t\tthis.removeAllListeners();\r\n\r\n\t\t\tthis.parent = null;\r\n\r\n\t\t\tif (this._source) {\r\n\t\t\t\tthis._source.src = \"\";\r\n\t\t\t\tthis._source.load();\r\n\t\t\t\tthis._source = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the audio source element.\r\n\t\t * @name PIXI.sound.legacy.LegacySound#source\r\n\t\t * @type {HTMLAudioElement}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get source(): HTMLAudioElement {\r\n\t\t\treturn this._source;\r\n\t\t}\r\n\r\n\t\t// Implement the method to being preloading\r\n\t\tpublic load(callback?: LoadedCallback): void {\r\n\t\t\tconst source = this._source;\r\n\t\t\tconst sound = this.parent;\r\n\r\n\t\t\t// See if the source is already loaded\r\n\t\t\tif (source.readyState === 4) {\r\n\t\t\t\tsound.isLoaded = true;\r\n\t\t\t\tconst instance = sound.autoPlayStart();\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tcallback(null, sound, instance);\r\n\t\t\t\t\t}, 0);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If there's no source, we cannot load\r\n\t\t\tif (!sound.url) {\r\n\t\t\t\treturn callback(new Error(\"sound.url or sound.source must be set\"));\r\n\t\t\t}\r\n\r\n\t\t\t// Set the source\r\n\t\t\tsource.src = sound.url;\r\n\r\n\t\t\t// Remove all event listeners\r\n\t\t\tconst removeListeners = () => {\r\n\t\t\t\t// Listen for callback\r\n\t\t\t\tsource.removeEventListener('canplaythrough', onLoad);\r\n\t\t\t\tsource.removeEventListener('load', onLoad);\r\n\t\t\t\tsource.removeEventListener('abort', onAbort);\r\n\t\t\t\tsource.removeEventListener('error', onError);\r\n\t\t\t};\r\n\r\n\t\t\tconst onLoad = () => {\r\n\t\t\t\tremoveListeners();\r\n\t\t\t\tsound.isLoaded = true;\r\n\t\t\t\tconst instance = sound.autoPlayStart();\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(null, sound, instance);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tconst onAbort = () => {\r\n\t\t\t\tremoveListeners();\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(new Error('Sound loading has been aborted'));\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tconst onError = () => {\r\n\t\t\t\tremoveListeners();\r\n\t\t\t\tconst message = `Failed to load audio element (code: ${source.error.code})`;\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(new Error(message));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.error(message);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// Listen for callback\r\n\t\t\tsource.addEventListener('canplaythrough', onLoad, false);\r\n\t\t\tsource.addEventListener('load', onLoad, false);\r\n\t\t\tsource.addEventListener('abort', onAbort, false);\r\n\t\t\tsource.addEventListener('error', onError, false);\r\n\r\n\t\t\t// Begin the loading\r\n\t\t\tsource.load();\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound {\r\n\t/**\r\n\t * Interface represents either a WebAudio source or an HTML5 AudioElement source\r\n\t * @class IMedia\r\n\t * @memberof PIXI.sound\r\n\t * @private\r\n\t */\r\n\texport interface IMedia {\r\n\r\n\t\t/**\r\n\t\t * Collection of global filters\r\n\t\t * @member {Array<PIXI.sound.filters.Filter>} PIXI.sound.IMedia#filters\r\n\t\t */\r\n\t\tfilters: Filter[];\r\n\r\n\t\t/**\r\n\t\t * Reference to the context.\r\n\t\t * @member {PIXI.sound.IMediaContext} PIXI.sound.IMedia#context\r\n\t\t * @readonly\r\n\t\t */\r\n\t\treadonly context: IMediaContext;\r\n\r\n\t\t/**\r\n\t\t * Length of sound in seconds.\r\n\t\t * @member {number} PIXI.sound.IMedia#duration\r\n\t\t * @readonly\r\n\t\t */\r\n\t\treadonly duration: number;\r\n\r\n\t\t/**\r\n\t\t * Flag to check if sound is currently playable (e.g., has been loaded/decoded).\r\n\t\t * @member {boolean} PIXI.sound.IMedia#isPlayable\r\n\t\t * @readonly\r\n\t\t */\r\n\t\treadonly isPlayable: boolean;\r\n\r\n\t\t// Internal methods\r\n\t\tcreate(): IMediaInstance;\r\n\r\n\t\tinit(sound: Sound): void;\r\n\r\n\t\tload(callback?: LoadedCallback): void;\r\n\r\n\t\tdestroy(): void;\r\n\t}\r\n}\r\n","namespace pixi_sound {\r\n\t/**\r\n\t * Represents the audio context for playing back sounds. This can\r\n\t * represent either an HTML or WebAudio context.\r\n\t * @class IMediaContext\r\n\t * @memberof PIXI.sound\r\n\t */\r\n\texport interface IMediaContext {\r\n\t\t/**\r\n\t\t * `true` if all sounds are muted\r\n\t\t * @member {boolean} PIXI.sound.IMediaContext#muted\r\n\t\t */\r\n\t\tmuted: boolean;\r\n\r\n\t\t/**\r\n\t\t * Volume to apply to all sounds\r\n\t\t * @member {number} PIXI.sound.IMediaContext#volume\r\n\t\t */\r\n\t\tvolume: number;\r\n\r\n\t\t/**\r\n\t\t * The speed of all sounds\r\n\t\t * @member {number} PIXI.sound.IMediaContext#speed\r\n\t\t */\r\n\t\tspeed: number;\r\n\r\n\t\t/**\r\n\t\t * Set the paused state for all sounds\r\n\t\t * @member {boolean} PIXI.sound.IMediaContext#paused\r\n\t\t */\r\n\t\tpaused: boolean;\r\n\r\n\t\t/**\r\n\t\t * Collection of global filters\r\n\t\t * @member {Array<PIXI.sound.filters.Filter>} PIXI.sound.IMediaContext#filters\r\n\t\t */\r\n\t\tfilters: Filter[];\r\n\r\n\t\t/**\r\n\t\t * Toggle mute for all sounds\r\n\t\t * @method PIXI.sound.IMediaContext#toggleMute\r\n\t\t */\r\n\t\ttoggleMute(): boolean;\r\n\r\n\t\t/**\r\n\t\t * Toggle pause for all sounds\r\n\t\t * @method PIXI.sound.IMediaContext#togglePause\r\n\t\t */\r\n\t\ttogglePause(): boolean;\r\n\r\n\t\t/**\r\n\t\t * Dispatch event to refresh all instances volume, mute, etc.\r\n\t\t * @method PIXI.sound.IMediaContext#refresh\r\n\t\t * @private\r\n\t\t */\r\n\t\trefresh(): void;\r\n\r\n\t\t/**\r\n\t\t * Destroy the context and don't use after this.\r\n\t\t * @method PIXI.sound.IMediaContext#destroy\r\n\t\t */\r\n\t\tdestroy(): void;\r\n\r\n\t\t/**\r\n\t\t * Reference to the Web Audio API AudioContext element, if Web Audio is available\r\n\t\t * @member {AudioContext} PIXI.sound.IMediaContext#audioContext\r\n\t\t */\r\n\t\taudioContext: AudioContext;\r\n\t}\r\n}\r\n","namespace pixi_sound {\r\n\t/**\r\n\t * Interface for single instance return by a Sound play call. This can either\r\n\t * be a WebAudio or HTMLAudio instance.\r\n\t * @class IMediaInstance\r\n\t * @extends PIXI.utils.EventEmitter\r\n\t * @memberof PIXI.sound\r\n\t */\r\n\texport interface IMediaInstance {\r\n\t\t/**\r\n\t\t * Auto-incrementing ID for the instance.\r\n\t\t * @member {number} PIXI.sound.IMediaInstance#id\r\n\t\t */\r\n\t\tid: number;\r\n\r\n\t\t/**\r\n\t\t * Current progress of the sound from 0 to 1\r\n\t\t * @member {number} PIXI.sound.IMediaInstance#progress\r\n\t\t */\r\n\t\tprogress: number;\r\n\r\n\t\t/**\r\n\t\t * If the instance is paused, if the sound or global context\r\n\t\t * is paused, this could still be false.\r\n\t\t * @member {boolean} PIXI.sound.IMediaInstance#paused\r\n\t\t */\r\n\t\tpaused: boolean;\r\n\r\n\t\t/**\r\n\t\t * Current volume of the instance. This is not the actual volume\r\n\t\t * since it takes into account the global context and the sound volume.\r\n\t\t * @member {number} PIXI.sound.IMediaInstance#volume\r\n\t\t */\r\n\t\tvolume: number;\r\n\r\n\t\t/**\r\n\t\t * Current speed of the instance. This is not the actual speed\r\n\t\t * since it takes into account the global context and the sound volume.\r\n\t\t * @member {number} PIXI.sound.IMediaInstance#speed\r\n\t\t */\r\n\t\tspeed: number;\r\n\r\n\t\t/**\r\n\t\t * If the current instance is set to loop\r\n\t\t * @member {boolean} PIXI.sound.IMediaInstance#loop\r\n\t\t */\r\n\t\tloop: boolean;\r\n\r\n\t\t/**\r\n\t\t * Set the muted state of the instance\r\n\t\t * @member {boolean} PIXI.sound.IMediaInstance#muted\r\n\t\t */\r\n\t\tmuted: boolean;\r\n\r\n\t\t/**\r\n\t\t * Stop the current instance from playing.\r\n\t\t * @method PIXI.sound.IMediaInstance#stop\r\n\t\t */\r\n\t\tstop(): void;\r\n\r\n\t\t/**\r\n\t\t * Fired when the sound finishes playing.\r\n\t\t * @event PIXI.sound.IMediaInstance#end\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Fired when the sound starts playing.\r\n\t\t * @event PIXI.sound.IMediaInstance#start\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Fired when the sound when progress updates.\r\n\t\t * @event PIXI.sound.IMediaInstance#progress\r\n\t\t * @param {number} progress - Playback progress from 0 to 1\r\n\t\t * @param {number} duration - The total number of seconds of audio\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Fired when paused state changes.\r\n\t\t * @event PIXI.sound.IMediaInstance#pause\r\n\t\t * @param {boolean} paused - If the current state is paused\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Fired when instance is paused.\r\n\t\t * @event PIXI.sound.IMediaInstance#paused\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Fired when instance is resumed.\r\n\t\t * @event PIXI.sound.IMediaInstance#resumed\r\n\t\t */\r\n\r\n\t\t// These are used for typescript only and\r\n\t\t// are not accessible or part of the public API\r\n\t\trefresh(): void;\r\n\r\n\t\trefreshPaused(): void;\r\n\r\n\t\tinit(parent: IMedia): void;\r\n\r\n\t\tplay(options: PlayOptions): void;\r\n\r\n\t\tdestroy(): void;\r\n\r\n\t\ttoString(): string;\r\n\r\n\t\tonce(event: string, fn: Function, context?: any): PIXI.utils.EventEmitter;\r\n\t}\r\n}\r\n","namespace pixi_sound.loaders {\r\n\r\n\t/**\r\n\t * Sound middleware installation utilities for PIXI.loaders.Loader\r\n\t * @namespace PIXI.sound.loader\r\n\t * @private\r\n\t */\r\n\texport class LoaderMiddleware {\r\n\t\t/**\r\n\t\t * @name PIXI.sound.loader._sound\r\n\t\t * @type {PIXI.sound}\r\n\t\t * @static\r\n\t\t * @private\r\n\t\t */\r\n\t\tstatic _sound: SoundLibrary;\r\n\r\n\t\t/**\r\n\t\t * Install the middleware\r\n\t\t * @method PIXI.sound.loader.install\r\n\t\t * @param {PIXI.sound.SoundLibrary} sound - Instance of sound library\r\n\t\t */\r\n\t\tstatic install(sound: SoundLibrary) {\r\n\t\t\tLoaderMiddleware._sound = sound;\r\n\t\t\tLoaderMiddleware.legacy = sound.useLegacy;\r\n\r\n\t\t\t// Monkey-patch the PIXI.loaders.Loader class\r\n\t\t\t// to support using the resolve loader middleware\r\n\t\t\tconst Loader = PIXI.loaders.Loader;\r\n\t\t\tconst SoundLoader = function (baseUrl?: string, concurrency?: number) {\r\n\t\t\t\tLoader.call(this, baseUrl, concurrency);\r\n\t\t\t\tthis.use(LoaderMiddleware.plugin);\r\n\t\t\t\tthis.pre(LoaderMiddleware.resolve);\r\n\t\t\t};\r\n\t\t\tSoundLoader.prototype = Loader.prototype;\r\n\t\t\t(PIXI.loaders as any).Loader = SoundLoader;\r\n\r\n\t\t\t// Install middleware on the default loader\r\n\t\t\tPIXI.loader.use(LoaderMiddleware.plugin);\r\n\t\t\tPIXI.loader.pre(LoaderMiddleware.resolve);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the legacy mode\r\n\t\t * @name PIXI.sound.loader.legacy\r\n\t\t * @type {boolean}\r\n\t\t * @private\r\n\t\t */\r\n\t\tstatic set legacy(legacy: boolean) {\r\n\t\t\t// Configure PIXI Loader to handle audio files correctly\r\n\t\t\tconst Resource = PIXI.loaders.Resource;\r\n\t\t\tconst exts = SoundUtils.extensions;\r\n\r\n\t\t\t// Make sure we support webaudio\r\n\t\t\tif (!legacy) {\r\n\t\t\t\t// Load all audio files as ArrayBuffers\r\n\t\t\t\texts.forEach((ext) => {\r\n\t\t\t\t\tResource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.BUFFER);\r\n\t\t\t\t\tResource.setExtensionLoadType(ext, Resource.LOAD_TYPE.XHR);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Fall back to loading as <audio> elements\r\n\t\t\t\texts.forEach((ext) => {\r\n\t\t\t\t\tResource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.DEFAULT);\r\n\t\t\t\t\tResource.setExtensionLoadType(ext, Resource.LOAD_TYPE.AUDIO);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Handle the preprocessing of file paths\r\n\t\t */\r\n\t\tprivate static resolve(resource: PIXI.loaders.Resource, next: () => void): void {\r\n\t\t\tSoundUtils.resolveUrl(resource);\r\n\t\t\tnext();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Actual resource-loader middleware for sound class\r\n\t\t */\r\n\t\tprivate static plugin(resource: PIXI.loaders.Resource, next: () => void): void {\r\n\t\t\tif (resource.data && SoundUtils.extensions.indexOf(resource.extension) > -1) {\r\n\t\t\t\t(resource as any).sound = LoaderMiddleware._sound.add(resource.name, {\r\n\t\t\t\t\tloaded: next,\r\n\t\t\t\t\tpreload: true,\r\n\t\t\t\t\turl: resource.url,\r\n\t\t\t\t\tsource: resource.data,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnext();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound {\r\n// Sound sprite data setup\r\n\texport interface SoundSpriteData {\r\n\t\tstart: number;\r\n\t\tend: number;\r\n\t\tspeed?: number;\r\n\t}\r\n\r\n// Collection of sound sprites\r\n\texport type SoundSprites = { [id: string]: SoundSprite };\r\n\r\n\t/**\r\n\t * Object that represents a single Sound's sprite.\r\n\t * @class SoundSprite\r\n\t * @memberof PIXI.sound\r\n\t * @param {PIXI.sound.Sound} parent The parent sound\r\n\t * @param {Object} options Data associated with object.\r\n\t * @param {number} options.start The start time in seconds.\r\n\t * @param {number} options.end The end time in seconds.\r\n\t * @param {number} [options.speed] The optional speed, if not speed, uses\r\n\t *        the default speed of the parent.\r\n\t */\r\n\texport class SoundSprite {\r\n\t\t/**\r\n\t\t * The reference sound\r\n\t\t * @name PIXI.sound.SoundSprite#parent\r\n\t\t * @type {PIXI.sound.Sound}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic parent: Sound;\r\n\r\n\t\t/**\r\n\t\t * The starting location in seconds.\r\n\t\t * @name PIXI.sound.SoundSprite#start\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic start: number;\r\n\r\n\t\t/**\r\n\t\t * The ending location in seconds\r\n\t\t * @name PIXI.sound.SoundSprite#end\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic end: number;\r\n\r\n\t\t/**\r\n\t\t * The speed override where 1 is 100% speed playback.\r\n\t\t * @name PIXI.sound.SoundSprite#speed\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic speed: number;\r\n\r\n\t\t/**\r\n\t\t * The duration of the sound in seconds.\r\n\t\t * @name PIXI.sound.SoundSprite#duration\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic duration: number;\r\n\r\n\t\t/**\r\n\t\t * Constructor\r\n\t\t */\r\n\t\tconstructor(parent: Sound, options: SoundSpriteData) {\r\n\t\t\tthis.parent = parent;\r\n\t\t\tObject.assign(this, options);\r\n\t\t\tthis.duration = this.end - this.start;\r\n\r\n\t\t\t// @if DEBUG\r\n\t\t\tconsole.assert(this.duration > 0, \"End time must be after start time\");\r\n\t\t\t// @endif\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Play the sound sprite.\r\n\t\t * @method PIXI.sound.SoundSprite#play\r\n\t\t * @param {PIXI.sound.Sound~completeCallback} [complete] Function call when complete\r\n\t\t * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} Sound instance being played.\r\n\t\t */\r\n\t\tpublic play(complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance> {\r\n\t\t\treturn this.parent.play(Object.assign({\r\n\t\t\t\tcomplete,\r\n\t\t\t\tspeed: this.speed || this.parent.speed,\r\n\t\t\t\tend: this.end,\r\n\t\t\t\tstart: this.start,\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Destroy and don't use after this\r\n\t\t * @method PIXI.sound.SoundSprite#destroy\r\n\t\t */\r\n\t\tpublic destroy(): void {\r\n\t\t\tthis.parent = null;\r\n\t\t}\r\n\t}\r\n}\r\n","// Promise usage for loading sounds\r\n// import 'promise-polyfill';\r\n\r\n// Object.assign usage\r\n// import 'es6-object-assign/auto';\r\n","namespace pixi_sound {\r\n\texport interface RenderOptions {\r\n\t\twidth?: number;\r\n\t\theight?: number;\r\n\t\tfill?: string | CanvasPattern | CanvasGradient;\r\n\t}\r\n\r\n\texport type ExtensionMap = { [key: string]: boolean };\r\n\r\n\t/**\r\n\t * Utilities that work with sounds.\r\n\t * @namespace PIXI.sound.utils\r\n\t */\r\n\texport class SoundUtils {\r\n\t\t/**\r\n\t\t * Increment the alias for play once\r\n\t\t * @static\r\n\t\t * @private\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tprivate static PLAY_ID = 0;\r\n\r\n\t\t/**\r\n\t\t * RegExp for looking for format patterns.\r\n\t\t * @static\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate static FORMAT_PATTERN = /\\.(\\{([^\\}]+)\\})(\\?.*)?$/;\r\n\r\n\t\t/**\r\n\t\t * The list of extensions that can be played.\r\n\t\t * @readonly\r\n\t\t * @static\r\n\t\t * @member {string[]} PIXI.sound.utils.extensions\r\n\t\t */\r\n\t\tpublic static extensions: string[] = [\r\n\t\t\t\"mp3\",\r\n\t\t\t\"ogg\",\r\n\t\t\t\"oga\",\r\n\t\t\t\"opus\",\r\n\t\t\t\"mpeg\",\r\n\t\t\t\"wav\",\r\n\t\t\t\"m4a\",\r\n\t\t\t\"mp4\",\r\n\t\t\t\"aiff\",\r\n\t\t\t\"wma\",\r\n\t\t\t\"mid\"\r\n\t\t];\r\n\r\n\t\t/**\r\n\t\t * The list of browser supported audio formats.\r\n\t\t * @readonly\r\n\t\t * @static\r\n\t\t * @member {Object} PIXI.sound.utils.supported\r\n\t\t * @property {boolean} mp3 - `true` if file-type is supported\r\n\t\t * @property {boolean} ogg - `true` if file-type is supported\r\n\t\t * @property {boolean} oga - `true` if file-type is supported\r\n\t\t * @property {boolean} opus - `true` if file-type is supported\r\n\t\t * @property {boolean} mpeg - `true` if file-type is supported\r\n\t\t * @property {boolean} wav - `true` if file-type is supported\r\n\t\t * @property {boolean} mp4 - `true` if file-type is supported\r\n\t\t * @property {boolean} aiff - `true` if file-type is supported\r\n\t\t * @property {boolean} wma - `true` if file-type is supported\r\n\t\t * @property {boolean} mid - `true` if file-type is supported\r\n\t\t */\r\n\t\tpublic static supported: ExtensionMap = function (): ExtensionMap {\r\n\t\t\tconst types: { [key: string]: string } = {\r\n\t\t\t\tm4a: \"mp4\",\r\n\t\t\t\toga: \"ogg\"\r\n\t\t\t};\r\n\t\t\tconst audio = document.createElement('audio');\r\n\t\t\tconst formats: ExtensionMap = {};\r\n\t\t\tconst no = /^no$/;\r\n\t\t\tSoundUtils.extensions.forEach(ext => {\r\n\t\t\t\tconst type = types[ext] || ext;\r\n\t\t\t\tconst canByExt = audio.canPlayType(`audio/${ext}`).replace(no, '');\r\n\t\t\t\tconst canByType = audio.canPlayType(`audio/${type}`).replace(no, '');\r\n\t\t\t\tformats[ext] = !!canByExt || !!canByType;\r\n\t\t\t});\r\n\r\n\t\t\treturn Object.freeze(formats);\r\n\t\t}();\r\n\r\n\t\t/**\r\n\t\t * Resolve a URL with different formats in glob pattern to\r\n\t\t * a path based on the supported browser format. For instance:\r\n\t\t * \"sounds/music.{ogg,mp3}\", would resolve to \"sounds/music.ogg\"\r\n\t\t * if \"ogg\" support is found, otherwise, fallback to \"sounds.music.mp3\"\r\n\t\t * @method PIXI.sound.utils.resolveUrl\r\n\t\t * @static\r\n\t\t * @param {string|PIXI.loaders.Resource} source - Path to resolve or Resource, if\r\n\t\t *        a Resource object is provided, automatically updates the extension and url\r\n\t\t *        of that object.\r\n\t\t * @return {string} The format to resolve to\r\n\t\t */\r\n\t\tpublic static resolveUrl(source: string | PIXI.loaders.Resource): string {\r\n\t\t\t// search for patterns like \".{mp3,ogg}\"\"\r\n\t\t\tconst glob = SoundUtils.FORMAT_PATTERN;\r\n\t\t\tconst url: string = typeof source === 'string' ? source : source.url;\r\n\r\n\t\t\tif (!glob.test(url)) {\r\n\t\t\t\treturn url;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst match = glob.exec(url);\r\n\t\t\t\tconst exts = match[2].split(',');\r\n\t\t\t\tlet replace = exts[exts.length - 1]; // fallback to last ext\r\n\t\t\t\tfor (let i = 0, len = exts.length; i < len; i++) {\r\n\t\t\t\t\tconst ext = exts[i];\r\n\t\t\t\t\tif (SoundUtils.supported[ext]) {\r\n\t\t\t\t\t\treplace = ext;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconst resolved = url.replace(match[1], replace);\r\n\t\t\t\tif (!(typeof source === 'string')) {\r\n\t\t\t\t\tsource.extension = replace;\r\n\t\t\t\t\tsource.url = resolved;\r\n\t\t\t\t}\r\n\t\t\t\treturn resolved;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Create a new sound for a sine wave-based tone.  **Only supported with WebAudio**\r\n\t\t * @method PIXI.sound.utils.sineTone\r\n\t\t * @param {number} [hertz=200] Frequency of sound.\r\n\t\t * @param {number} [seconds=1] Duration of sound in seconds.\r\n\t\t * @return {PIXI.sound.Sound} New sound.\r\n\t\t */\r\n\t\tpublic static sineTone(hertz: number = 200, seconds: number = 1): Sound {\r\n\t\t\tconst sound = Sound.from({\r\n\t\t\t\tsingleInstance: true,\r\n\t\t\t});\r\n\r\n\t\t\tif (!(sound.media instanceof webaudio.WebAudioMedia)) {\r\n\t\t\t\treturn sound;\r\n\t\t\t}\r\n\r\n\t\t\tconst media = sound.media as webaudio.WebAudioMedia;\r\n\t\t\tconst context = sound.context as webaudio.WebAudioContext;\r\n\r\n\t\t\t// set default value\r\n\t\t\tconst nChannels = 1;\r\n\t\t\tconst sampleRate = 48000;\r\n\t\t\tconst amplitude = 2;\r\n\r\n\t\t\t// create the buffer\r\n\t\t\tconst buffer = context.audioContext.createBuffer(\r\n\t\t\t\tnChannels,\r\n\t\t\t\tseconds * sampleRate,\r\n\t\t\t\tsampleRate,\r\n\t\t\t);\r\n\t\t\tconst fArray = buffer.getChannelData(0);\r\n\r\n\t\t\t// fill the buffer\r\n\t\t\tfor (let i = 0; i < fArray.length; i++) {\r\n\t\t\t\tconst time = i / buffer.sampleRate;\r\n\t\t\t\tconst angle = hertz * time * Math.PI;\r\n\t\t\t\tfArray[i] = Math.sin(angle) * amplitude;\r\n\t\t\t}\r\n\r\n\t\t\t// set the buffer\r\n\t\t\tmedia.buffer = buffer;\r\n\t\t\tsound.isLoaded = true;\r\n\t\t\treturn sound;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Render image as Texture. **Only supported with WebAudio**\r\n\t\t * @method PIXI.sound.utils.render\r\n\t\t * @param {PIXI.sound.Sound} sound Instance of sound to render\r\n\t\t * @param {Object} [options] Custom rendering options\r\n\t\t * @param {number} [options.width=512] Width of the render\r\n\t\t * @param {number} [options.height=128] Height of the render\r\n\t\t * @param {string|CanvasPattern|CanvasGradient} [options.fill='black'] Fill style for waveform\r\n\t\t * @return {PIXI.Texture} Result texture\r\n\t\t */\r\n\t\tpublic static render(sound: Sound, options?: RenderOptions): PIXI.BaseTexture {\r\n\t\t\tconst canvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n\r\n\t\t\toptions = Object.assign({\r\n\t\t\t\twidth: 512,\r\n\t\t\t\theight: 128,\r\n\t\t\t\tfill: \"black\",\r\n\t\t\t}, options || {});\r\n\r\n\t\t\tcanvas.width = options.width;\r\n\t\t\tcanvas.height = options.height;\r\n\r\n\t\t\tconst baseTexture = PIXI.BaseTexture.fromCanvas(canvas);\r\n\r\n\t\t\tif (!(sound.media instanceof webaudio.WebAudioMedia)) {\r\n\t\t\t\treturn baseTexture;\r\n\t\t\t}\r\n\r\n\t\t\tconst media: webaudio.WebAudioMedia = sound.media as webaudio.WebAudioMedia;\r\n\r\n\t\t\tconsole.assert(!!media.buffer, \"No buffer found, load first\");\r\n\r\n\t\t\tconst context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\r\n\t\t\tcontext.fillStyle = options.fill;\r\n\t\t\tconst data: Float32Array = media.buffer.getChannelData(0);\r\n\t\t\tconst step: number = Math.ceil(data.length / options.width);\r\n\t\t\tconst amp: number = options.height / 2;\r\n\r\n\t\t\tfor (let i: number = 0; i < options.width; i++) {\r\n\t\t\t\tlet min: number = 1.0;\r\n\t\t\t\tlet max: number = -1.0;\r\n\r\n\t\t\t\tfor (let j: number = 0; j < step; j++) {\r\n\t\t\t\t\tconst datum: number = data[(i * step) + j];\r\n\r\n\t\t\t\t\tif (datum < min) {\r\n\t\t\t\t\t\tmin = datum;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (datum > max) {\r\n\t\t\t\t\t\tmax = datum;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcontext.fillRect(i, (1 + min) * amp, 1, Math.max(1, (max - min) * amp));\r\n\t\t\t}\r\n\t\t\treturn baseTexture;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Create a new \"Audio\" stream based on given audio path and project uri; returns the audio object.\r\n\t\t * @method PIXI.sound.utils.playOnce\r\n\t\t * @static\r\n\t\t * @param {String} fileName Full path of the file to play.\r\n\t\t * @param {Function} callback Callback when complete.\r\n\t\t * @return {string} New audio element alias.\r\n\t\t */\r\n\t\tpublic static playOnce(url: string, callback?: (err?: Error) => void): string {\r\n\t\t\tconst alias = `alias${SoundUtils.PLAY_ID++}`;\r\n\r\n\t\t\tSoundLibrary.instance.add(alias, {\r\n\t\t\t\turl,\r\n\t\t\t\tpreload: true,\r\n\t\t\t\tautoPlay: true,\r\n\t\t\t\tloaded: (err: Error) => {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\tSoundLibrary.instance.remove(alias);\r\n\t\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\t\tcallback(err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tcomplete: () => {\r\n\t\t\t\t\tSoundLibrary.instance.remove(alias);\r\n\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\tcallback(null);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\treturn alias;\r\n\t\t}\r\n\t}\r\n\r\n\texport const utils = SoundUtils;\r\n}\r\n","namespace pixi_sound.webaudio {\r\n\t/**\r\n\t * Main class to handle WebAudio API. There's a simple chain\r\n\t * of AudioNode elements: analyser > compressor > context.destination.\r\n\t * any filters that are added are inserted between the analyser and compressor nodes\r\n\t * @private\r\n\t * @class WebAudioContext\r\n\t * @extends PIXI.sound.Filterable\r\n\t * @memberof PIXI.sound.webaudio\r\n\t */\r\n\texport class WebAudioContext extends Filterable implements IMediaContext {\r\n\t\t/**\r\n\t\t * Context Compressor node\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#compressor\r\n\t\t * @type {DynamicsCompressorNode}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic compressor: DynamicsCompressorNode;\r\n\r\n\t\t/**\r\n\t\t * Context Analyser node\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#analyser\r\n\t\t * @type {AnalyserNode}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic analyser: AnalyserNode;\r\n\r\n\t\t/**\r\n\t\t * Global speed of all sounds\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#speed\r\n\t\t * @type {AnalyserNode}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic speed: number;\r\n\r\n\t\t/**\r\n\t\t * Sets the muted state.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#muted\r\n\t\t * @default false\r\n\t\t */\r\n\t\tpublic muted: boolean;\r\n\r\n\t\t/**\r\n\t\t * Sets the volume from 0 to 1.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#volume\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tpublic volume: number;\r\n\r\n\t\t/**\r\n\t\t * Handle global events\r\n\t\t * @type {PIXI.utils.EventEmitter}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#events\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tpublic events: PIXI.utils.EventEmitter;\r\n\r\n\t\t/**\r\n\t\t * The instance of the AudioContext for WebAudio API.\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#_ctx\r\n\t\t * @type {AudioContext}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _ctx: AudioContext;\r\n\r\n\t\t/**\r\n\t\t * The instance of the OfflineAudioContext for fast decoding audio.\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#_offlineCtx\r\n\t\t * @type {OfflineAudioContext}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _offlineCtx: OfflineAudioContext;\r\n\r\n\t\t/**\r\n\t\t * Current paused status\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#_paused\r\n\t\t * @type {boolean}\r\n\t\t * @private\r\n\t\t * @default false\r\n\t\t */\r\n\t\tprivate _paused: boolean;\r\n\r\n\t\t/**\r\n\t\t * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\r\n\t\t * empty sound.\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#_unlocked\r\n\t\t * @type {boolean}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _unlocked: boolean;\r\n\r\n\t\tconstructor() {\r\n\t\t\tconst ctx = new WebAudioContext.AudioContext();\r\n\t\t\tconst compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\r\n\t\t\tconst analyser: AnalyserNode = ctx.createAnalyser();\r\n\r\n\t\t\t// setup the end of the node chain\r\n\t\t\tanalyser.connect(compressor);\r\n\t\t\tcompressor.connect(ctx.destination);\r\n\r\n\t\t\tsuper(analyser, compressor);\r\n\r\n\t\t\tthis._ctx = ctx;\r\n\t\t\tthis._offlineCtx = new WebAudioContext.OfflineAudioContext(1, 2, ctx.sampleRate);\r\n\t\t\tthis._unlocked = false;\r\n\r\n\t\t\tthis.compressor = compressor;\r\n\t\t\tthis.analyser = analyser;\r\n\t\t\tthis.events = new PIXI.utils.EventEmitter();\r\n\r\n\t\t\t// Set the defaults\r\n\t\t\tthis.volume = 1;\r\n\t\t\tthis.speed = 1;\r\n\t\t\tthis.muted = false;\r\n\t\t\tthis.paused = false;\r\n\r\n\t\t\t// Listen for document level clicks to unlock WebAudio on iOS. See the _unlock method.\r\n\t\t\tif (\"ontouchstart\" in window && ctx.state !== \"running\") {\r\n\t\t\t\tthis._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\r\n\t\t\t\tthis._unlock = this._unlock.bind(this);\r\n\t\t\t\tdocument.addEventListener(\"mousedown\", this._unlock, true);\r\n\t\t\t\tdocument.addEventListener(\"touchstart\", this._unlock, true);\r\n\t\t\t\tdocument.addEventListener(\"touchend\", this._unlock, true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\r\n\t\t * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\r\n\t\t * will fail if the user presses for too long, indicating a scroll event instead of a click event.\r\n\t\t *\r\n\t\t * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\r\n\t\t * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\r\n\t\t * stick with `mousedown` and `touchend`.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioContext#_unlock\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _unlock(): void {\r\n\t\t\tif (this._unlocked) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.playEmptySound();\r\n\t\t\tif (this._ctx.state === \"running\") {\r\n\t\t\t\tdocument.removeEventListener(\"mousedown\", this._unlock, true);\r\n\t\t\t\tdocument.removeEventListener(\"touchend\", this._unlock, true);\r\n\t\t\t\tdocument.removeEventListener(\"touchstart\", this._unlock, true);\r\n\t\t\t\tthis._unlocked = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\r\n\t\t * require the first sound to be played inside of a user initiated event (touch/click).\r\n\t\t * @method PIXI.sound.webaudio.WebAudioContext#playEmptySound\r\n\t\t */\r\n\t\tpublic playEmptySound(): void {\r\n\t\t\tconst source = this._ctx.createBufferSource();\r\n\t\t\tsource.buffer = this._ctx.createBuffer(1, 1, 22050);\r\n\t\t\tsource.connect(this._ctx.destination);\r\n\t\t\tsource.start(0, 0, 0);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get AudioContext class, if not supported returns `null`\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext.AudioContext\r\n\t\t * @type {Function}\r\n\t\t * @static\r\n\t\t */\r\n\t\tpublic static get AudioContext(): typeof AudioContext {\r\n\t\t\tconst win: any = window as any;\r\n\t\t\treturn (\r\n\t\t\t\twin.AudioContext ||\r\n\t\t\t\twin.webkitAudioContext ||\r\n\t\t\t\tnull\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get OfflineAudioContext class, if not supported returns `null`\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext.OfflineAudioContext\r\n\t\t * @type {Function}\r\n\t\t * @static\r\n\t\t */\r\n\t\tpublic static get OfflineAudioContext(): typeof OfflineAudioContext {\r\n\t\t\tconst win: any = window as any;\r\n\t\t\treturn (\r\n\t\t\t\twin.OfflineAudioContext ||\r\n\t\t\t\twin.webkitOfflineAudioContext ||\r\n\t\t\t\tnull\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Destroy this context.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioContext#destroy\r\n\t\t */\r\n\t\tpublic destroy() {\r\n\t\t\tsuper.destroy();\r\n\r\n\t\t\tconst ctx: any = this._ctx as any;\r\n\t\t\t// check if browser supports AudioContext.close()\r\n\t\t\tif (typeof ctx.close !== \"undefined\") {\r\n\t\t\t\tctx.close();\r\n\t\t\t}\r\n\t\t\tthis.events.removeAllListeners();\r\n\t\t\tthis.analyser.disconnect();\r\n\t\t\tthis.compressor.disconnect();\r\n\t\t\tthis.analyser = null;\r\n\t\t\tthis.compressor = null;\r\n\t\t\tthis.events = null;\r\n\t\t\tthis._offlineCtx = null;\r\n\t\t\tthis._ctx = null;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The WebAudio API AudioContext object.\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#audioContext\r\n\t\t * @type {AudioContext}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get audioContext(): AudioContext {\r\n\t\t\treturn this._ctx;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The WebAudio API OfflineAudioContext object.\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#offlineContext\r\n\t\t * @type {OfflineAudioContext}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic get offlineContext(): OfflineAudioContext {\r\n\t\t\treturn this._offlineCtx;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Pauses all sounds, even though we handle this at the instance\r\n\t\t * level, we'll also pause the audioContext so that the\r\n\t\t * time used to compute progress isn't messed up.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioContext#paused\r\n\t\t * @default false\r\n\t\t */\r\n\t\tpublic set paused(paused: boolean) {\r\n\t\t\tif (paused && this._ctx.state === \"running\") {\r\n\t\t\t\t(this._ctx as any).suspend();\r\n\t\t\t}\r\n\t\t\telse if (!paused && this._ctx.state === \"suspended\") {\r\n\t\t\t\t(this._ctx as any).resume();\r\n\t\t\t}\r\n\t\t\tthis._paused = paused;\r\n\t\t}\r\n\r\n\t\tpublic get paused(): boolean {\r\n\t\t\treturn this._paused;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Emit event when muted, volume or speed changes\r\n\t\t * @method PIXI.sound.webaudio.WebAudioContext#refresh\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic refresh(): void {\r\n\t\t\tthis.events.emit('refresh');\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Emit event when muted, volume or speed changes\r\n\t\t * @method PIXI.sound.webaudio.WebAudioContext#refreshPaused\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic refreshPaused(): void {\r\n\t\t\tthis.events.emit('refreshPaused');\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Toggles the muted state.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioContext#toggleMute\r\n\t\t * @return {boolean} The current muted state.\r\n\t\t */\r\n\t\tpublic toggleMute(): boolean {\r\n\t\t\tthis.muted = !this.muted;\r\n\t\t\tthis.refresh();\r\n\t\t\treturn this.muted;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Toggles the paused state.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioContext#togglePause\r\n\t\t * @return {boolean} The current muted state.\r\n\t\t */\r\n\t\tpublic togglePause(): boolean {\r\n\t\t\tthis.paused = !this.paused;\r\n\t\t\tthis.refreshPaused();\r\n\t\t\treturn this._paused;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Decode the audio data\r\n\t\t * @method decode\r\n\t\t * @param {ArrayBuffer} arrayBuffer Buffer from loader\r\n\t\t * @param {Function} callback When completed, error and audioBuffer are parameters.\r\n\t\t */\r\n\t\tpublic decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void {\r\n\t\t\tthis._offlineCtx.decodeAudioData(\r\n\t\t\t\tarrayBuffer, (buffer: AudioBuffer) => {\r\n\t\t\t\t\tcallback(null, buffer);\r\n\t\t\t\t},\r\n\t\t\t\t() => {\r\n\t\t\t\t\tcallback(new Error(\"Unable to decode file\"));\r\n\t\t\t\t},\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.webaudio {\r\n\tlet id = 0;\r\n\r\n\t/**\r\n\t * A single play instance that handles the AudioBufferSourceNode.\r\n\t * @private\r\n\t * @class WebAudioInstance\r\n\t * @memberof PIXI.sound.webaudio\r\n\t * @param {SoundNodes} source Reference to the SoundNodes.\r\n\t */\r\n\texport class WebAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance {\r\n\t\t/**\r\n\t\t * The current unique ID for this instance.\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#id\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic id: number;\r\n\r\n\t\t/**\r\n\t\t * The source Sound.\r\n\t\t * @type {PIXI.sound.webaudio.WebAudioMedia}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_media\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _media: WebAudioMedia;\r\n\r\n\t\t/**\r\n\t\t * true if paused.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_paused\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _paused: boolean;\r\n\r\n\t\t/**\r\n\t\t * true if muted.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_muted\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _muted: boolean;\r\n\r\n\t\t/**\r\n\t\t * true if paused.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_pausedReal\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _pausedReal: boolean;\r\n\r\n\t\t/**\r\n\t\t * The instance volume\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_volume\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _volume: number;\r\n\r\n\t\t/**\r\n\t\t * Last update frame number.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_lastUpdate\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _lastUpdate: number;\r\n\r\n\t\t/**\r\n\t\t * The total number of seconds elapsed in playback.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_elapsed\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _elapsed: number;\r\n\r\n\t\t/**\r\n\t\t * Playback rate, where 1 is 100%.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_speed\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _speed: number;\r\n\r\n\t\t/**\r\n\t\t * Playback rate, where 1 is 100%.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_end\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _end: number;\r\n\r\n\t\t/**\r\n\t\t * `true` if should be looping.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_loop\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _loop: boolean;\r\n\r\n\t\t/**\r\n\t\t * Gain node for controlling volume of instance\r\n\t\t * @type {GainNode}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_gain\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _gain: GainNode;\r\n\r\n\t\t/**\r\n\t\t * Length of the sound in seconds.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_duration\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _duration: number;\r\n\r\n\t\t/**\r\n\t\t * The progress of the sound from 0 to 1.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_progress\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _progress: number;\r\n\r\n\t\t/**\r\n\t\t * Callback for update listener\r\n\t\t * @type {EventListener}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_updateListener\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _updateListener: EventListener;\r\n\r\n\t\t/**\r\n\t\t * Audio buffer source clone from Sound object.\r\n\t\t * @type {AudioBufferSourceNode}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_source\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _source: AudioBufferSourceNode;\r\n\r\n\t\tconstructor(media: WebAudioMedia) {\r\n\t\t\tsuper();\r\n\r\n\t\t\tthis.id = id++;\r\n\t\t\tthis._media = null;\r\n\t\t\tthis._paused = false;\r\n\t\t\tthis._muted = false;\r\n\t\t\tthis._elapsed = 0;\r\n\t\t\tthis._updateListener = this._update.bind(this) as EventListener;\r\n\r\n\t\t\t// Initialize\r\n\t\t\tthis.init(media);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops the instance, don't use after this.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#stop\r\n\t\t */\r\n\t\tpublic stop(): void {\r\n\t\t\tif (this._source) {\r\n\t\t\t\tthis._internalStop();\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The sound is stopped. Don't use after this is called.\r\n\t\t\t\t * @event PIXI.sound.webaudio.WebAudioInstance#stop\r\n\t\t\t\t */\r\n\t\t\t\tthis.emit(\"stop\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the instance speed from 0 to 1\r\n\t\t * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#speed\r\n\t\t */\r\n\t\tpublic get speed(): number {\r\n\t\t\treturn this._speed;\r\n\t\t}\r\n\r\n\t\tpublic set speed(speed: number) {\r\n\t\t\tthis._speed = speed;\r\n\t\t\tthis.refresh();\r\n\t\t\tthis._update(true); // update progress\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the set the volume for this instance from 0 to 1\r\n\t\t * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#volume\r\n\t\t */\r\n\t\tpublic get volume(): number {\r\n\t\t\treturn this._volume;\r\n\t\t}\r\n\r\n\t\tpublic set volume(volume: number) {\r\n\t\t\tthis._volume = volume;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * `true` if the sound is muted\r\n\t\t * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#muted\r\n\t\t */\r\n\t\tpublic get muted(): boolean {\r\n\t\t\treturn this._muted;\r\n\t\t}\r\n\r\n\t\tpublic set muted(muted: boolean) {\r\n\t\t\tthis._muted = muted;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * If the sound instance should loop playback\r\n\t\t * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#loop\r\n\t\t */\r\n\t\tpublic get loop(): boolean {\r\n\t\t\treturn this._loop;\r\n\t\t}\r\n\r\n\t\tpublic set loop(loop: boolean) {\r\n\t\t\tthis._loop = loop;\r\n\t\t\tthis.refresh();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Refresh loop, volume and speed based on changes to parent\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#refresh\r\n\t\t */\r\n\t\tpublic refresh(): void {\r\n\t\t\tconst global = this._media.context;\r\n\t\t\tconst sound = this._media.parent;\r\n\r\n\t\t\t// Updating looping\r\n\t\t\tthis._source.loop = this._loop || sound.loop;\r\n\r\n\t\t\t// Update the volume\r\n\t\t\tconst globalVolume = global.volume * (global.muted ? 0 : 1);\r\n\t\t\tconst soundVolume = sound.volume * (sound.muted ? 0 : 1);\r\n\t\t\tconst instanceVolume = this._volume * (this._muted ? 0 : 1);\r\n\t\t\tthis._gain.gain.value = instanceVolume * soundVolume * globalVolume;\r\n\r\n\t\t\t// Update the speed\r\n\t\t\tthis._source.playbackRate.value = this._speed * sound.speed * global.speed;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Handle changes in paused state, either globally or sound or instance\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#refreshPaused\r\n\t\t */\r\n\t\tpublic refreshPaused(): void {\r\n\t\t\tconst global = this._media.context;\r\n\t\t\tconst sound = this._media.parent;\r\n\r\n\t\t\t// Consider global and sound paused\r\n\t\t\tconst pausedReal = this._paused || sound.paused || global.paused;\r\n\r\n\t\t\tif (pausedReal !== this._pausedReal) {\r\n\t\t\t\tthis._pausedReal = pausedReal;\r\n\r\n\t\t\t\tif (pausedReal) {\r\n\t\t\t\t\t// pause the sounds\r\n\t\t\t\t\tthis._internalStop();\r\n\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * The sound is paused.\r\n\t\t\t\t\t * @event PIXI.sound.webaudio.WebAudioInstance#paused\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.emit(\"paused\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * The sound is unpaused.\r\n\t\t\t\t\t * @event PIXI.sound.webaudio.WebAudioInstance#resumed\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.emit(\"resumed\");\r\n\r\n\t\t\t\t\t// resume the playing with offset\r\n\t\t\t\t\tthis.play({\r\n\t\t\t\t\t\tstart: this._elapsed % this._duration,\r\n\t\t\t\t\t\tend: this._end,\r\n\t\t\t\t\t\tspeed: this._speed,\r\n\t\t\t\t\t\tloop: this._loop,\r\n\t\t\t\t\t\tvolume: this._volume\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The sound is paused or unpaused.\r\n\t\t\t\t * @event PIXI.sound.webaudio.WebAudioInstance#pause\r\n\t\t\t\t * @property {boolean} paused If the instance was paused or not.\r\n\t\t\t\t */\r\n\t\t\t\tthis.emit(\"pause\", pausedReal);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Plays the sound.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#play\r\n\t\t * @param {Object} options Play options\r\n\t\t * @param {number} options.start The position to start playing, in seconds.\r\n\t\t * @param {number} options.end The ending position in seconds.\r\n\t\t * @param {number} options.speed Speed for the instance\r\n\t\t * @param {boolean} options.loop If the instance is looping, defaults to sound loop\r\n\t\t * @param {number} options.volume Volume of the instance\r\n\t\t * @param {boolean} options.muted Muted state of instance\r\n\t\t */\r\n\t\tpublic play(options: PlayOptions): void {\r\n\t\t\tconst {start, end, speed, loop, volume, muted} = options;\r\n\r\n\t\t\t// @if DEBUG\r\n\t\t\tif (end) {\r\n\t\t\t\tconsole.assert(end > start, \"End time is before start time\");\r\n\t\t\t}\r\n\t\t\t// @endif\r\n\t\t\tthis._paused = false;\r\n\t\t\tconst {source, gain} = this._media.nodes.cloneBufferSource();\r\n\r\n\t\t\tthis._source = source;\r\n\t\t\tthis._gain = gain;\r\n\t\t\tthis._speed = speed;\r\n\t\t\tthis._volume = volume;\r\n\t\t\tthis._loop = !!loop;\r\n\t\t\tthis._muted = muted;\r\n\t\t\tthis.refresh();\r\n\r\n\t\t\t// WebAudio doesn't support looping when a duration is set\r\n\t\t\t// we'll set this just for the heck of it\r\n\t\t\tif (this.loop && end !== null) {\r\n\t\t\t\t// @if DEBUG\r\n\t\t\t\tconsole.warn('Looping not support when specifying an \"end\" time');\r\n\t\t\t\t// @endif\r\n\t\t\t\tthis.loop = false;\r\n\t\t\t}\r\n\t\t\tthis._end = end;\r\n\r\n\t\t\tconst duration: number = this._source.buffer.duration;\r\n\r\n\t\t\tthis._duration = duration;\r\n\t\t\tthis._lastUpdate = this._now();\r\n\t\t\tthis._elapsed = start;\r\n\t\t\tthis._source.onended = this._onComplete.bind(this);\r\n\r\n\t\t\tif (end) {\r\n\t\t\t\tthis._source.start(0, start, end - start);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._source.start(0, start);\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * The sound is started.\r\n\t\t\t * @event PIXI.sound.webaudio.WebAudioInstance#start\r\n\t\t\t */\r\n\t\t\tthis.emit(\"start\");\r\n\r\n\t\t\t// Do an update for the initial progress\r\n\t\t\tthis._update(true);\r\n\r\n\t\t\t// Start handling internal ticks\r\n\t\t\tthis._enabled = true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Utility to convert time in millseconds or seconds\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#_toSec\r\n\t\t * @private\r\n\t\t * @param {number} [time] Time in either ms or sec\r\n\t\t * @return {number} Time in seconds\r\n\t\t */\r\n\t\tprivate _toSec(time?: number): number {\r\n\t\t\tif (time > 10) {\r\n\t\t\t\ttime /= 1000;\r\n\t\t\t}\r\n\t\t\treturn time || 0;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Start the update progress.\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#_enabled\r\n\t\t * @type {boolean}\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate set _enabled(enabled: boolean) {\r\n\t\t\tconst script = this._media.nodes.script;\r\n\r\n\t\t\tscript.removeEventListener('audioprocess', this._updateListener);\r\n\r\n\t\t\tif (enabled) {\r\n\t\t\t\tscript.addEventListener('audioprocess', this._updateListener);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The current playback progress from 0 to 1.\r\n\t\t * @type {number}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#progress\r\n\t\t */\r\n\t\tpublic get progress(): number {\r\n\t\t\treturn this._progress;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Pauses the sound.\r\n\t\t * @type {boolean}\r\n\t\t * @name PIXI.sound.webaudio.WebAudioInstance#paused\r\n\t\t */\r\n\t\tpublic get paused(): boolean {\r\n\t\t\treturn this._paused;\r\n\t\t}\r\n\r\n\t\tpublic set paused(paused: boolean) {\r\n\t\t\tthis._paused = paused;\r\n\t\t\tthis.refreshPaused();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Don't use after this.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#destroy\r\n\t\t */\r\n\t\tpublic destroy(): void {\r\n\t\t\tthis.removeAllListeners();\r\n\t\t\tthis._internalStop();\r\n\t\t\tif (this._source) {\r\n\t\t\t\tthis._source.disconnect();\r\n\t\t\t\tthis._source = null;\r\n\t\t\t}\r\n\t\t\tif (this._gain) {\r\n\t\t\t\tthis._gain.disconnect();\r\n\t\t\t\tthis._gain = null;\r\n\t\t\t}\r\n\t\t\tif (this._media) {\r\n\t\t\t\tthis._media.context.events.off('refresh', this.refresh, this);\r\n\t\t\t\tthis._media.context.events.off('refreshPaused', this.refreshPaused, this);\r\n\t\t\t\tthis._media = null;\r\n\t\t\t}\r\n\t\t\tthis._end = null;\r\n\t\t\tthis._speed = 1;\r\n\t\t\tthis._volume = 1;\r\n\t\t\tthis._loop = false;\r\n\t\t\tthis._elapsed = 0;\r\n\t\t\tthis._duration = 0;\r\n\t\t\tthis._paused = false;\r\n\t\t\tthis._muted = false;\r\n\t\t\tthis._pausedReal = false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * To string method for instance.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#toString\r\n\t\t * @return {string} The string representation of instance.\r\n\t\t * @private\r\n\t\t */\r\n\t\tpublic toString(): string {\r\n\t\t\treturn \"[WebAudioInstance id=\" + this.id + \"]\";\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the current time in seconds.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#_now\r\n\t\t * @private\r\n\t\t * @return {number} Seconds since start of context\r\n\t\t */\r\n\t\tprivate _now(): number {\r\n\t\t\treturn this._media.context.audioContext.currentTime;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Internal update the progress.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#_update\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _update(force: boolean = false): void {\r\n\t\t\tif (this._source) {\r\n\t\t\t\tconst now: number = this._now();\r\n\t\t\t\tconst delta: number = now - this._lastUpdate;\r\n\r\n\t\t\t\tif (delta > 0 || force) {\r\n\t\t\t\t\tconst speed: number = this._source.playbackRate.value;\r\n\t\t\t\t\tthis._elapsed += delta * speed;\r\n\t\t\t\t\tthis._lastUpdate = now;\r\n\t\t\t\t\tconst duration: number = this._duration;\r\n\t\t\t\t\tconst progress: number = (this._elapsed % duration) / duration;\r\n\r\n\t\t\t\t\t// Update the progress\r\n\t\t\t\t\tthis._progress = progress;\r\n\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * The sound progress is updated.\r\n\t\t\t\t\t * @event PIXI.sound.webaudio.WebAudioInstance#progress\r\n\t\t\t\t\t * @property {number} progress Amount progressed from 0 to 1\r\n\t\t\t\t\t * @property {number} duration The total playback in seconds\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.emit(\"progress\", this._progress, duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Initializes the instance.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#init\r\n\t\t */\r\n\t\tpublic init(media: WebAudioMedia): void {\r\n\t\t\tthis._media = media;\r\n\t\t\tmedia.context.events.on('refresh', this.refresh, this);\r\n\t\t\tmedia.context.events.on('refreshPaused', this.refreshPaused, this);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Stops the instance.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#_internalStop\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _internalStop(): void {\r\n\t\t\tif (this._source) {\r\n\t\t\t\tthis._enabled = false;\r\n\t\t\t\tthis._source.onended = null;\r\n\t\t\t\tthis._source.stop();\r\n\t\t\t\tthis._source = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Callback when completed.\r\n\t\t * @method PIXI.sound.webaudio.WebAudioInstance#_onComplete\r\n\t\t * @private\r\n\t\t */\r\n\t\tprivate _onComplete(): void {\r\n\t\t\tif (this._source) {\r\n\t\t\t\tthis._enabled = false;\r\n\t\t\t\tthis._source.onended = null;\r\n\t\t\t}\r\n\t\t\tthis._source = null;\r\n\t\t\tthis._progress = 1;\r\n\t\t\tthis.emit(\"progress\", 1, this._duration);\r\n\t\t\t/**\r\n\t\t\t * The sound ends, don't use after this\r\n\t\t\t * @event PIXI.sound.webaudio.WebAudioInstance#end\r\n\t\t\t */\r\n\t\t\tthis.emit(\"end\", this);\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound.webaudio {\r\n\r\n\r\n    /**\r\n     * Represents a single sound element. Can be used to play, pause, etc. sound instances.\r\n     * @private\r\n     * @class WebAudioMedia\r\n     * @memberof PIXI.sound.webaudio\r\n     * @param {PIXI.sound.Sound} parent - Instance of parent Sound container\r\n     */\r\n    export class WebAudioMedia implements IMedia\r\n    {\r\n        /**\r\n         * Reference to the parent Sound container.\r\n         * @name PIXI.sound.webaudio.WebAudioMedia#parent\r\n         * @type {PIXI.sound.Sound}\r\n         * @readonly\r\n         */\r\n        public parent: Sound;\r\n\r\n        /**\r\n         * The file buffer to load.\r\n         * @name PIXI.sound.webaudio.WebAudioMedia#source\r\n         * @type {ArrayBuffer}\r\n         * @readonly\r\n         */\r\n        public source: ArrayBuffer;\r\n\r\n        /**\r\n         * Instance of the chain builder.\r\n         * @name PIXI.sound.webaudio.WebAudioMedia#_nodes\r\n         * @type {PIXI.sound.webaudio.WebAudioNodes}\r\n         * @private\r\n         */\r\n        private _nodes: WebAudioNodes;\r\n\r\n        /**\r\n         * Instance of the source node.\r\n         * @name PIXI.sound.webaudio.WebAudioMedia#_source\r\n         * @type {AudioBufferSourceNode}\r\n         * @private\r\n         */\r\n        private _source: AudioBufferSourceNode;\r\n\r\n        init(parent:Sound): void\r\n        {\r\n            this.parent = parent;\r\n            this._nodes = new WebAudioNodes(this.context);\r\n            this._source = this._nodes.bufferSource;\r\n            this.source = parent.options.source as ArrayBuffer;\r\n        }\r\n\r\n        /**\r\n         * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\r\n         * @private\r\n         * @method PIXI.sound.webaudio.WebAudioMedia#destroy\r\n         */\r\n        public destroy(): void\r\n        {\r\n            this.parent = null;\r\n            this._nodes.destroy();\r\n            this._nodes = null;\r\n            this._source = null;\r\n            this.source = null;\r\n        }\r\n\r\n        // Implement create\r\n        public create(): WebAudioInstance\r\n        {\r\n            return new WebAudioInstance(this);\r\n        }\r\n\r\n        // Implement context\r\n        public get context(): WebAudioContext\r\n        {\r\n            return this.parent.context as WebAudioContext;\r\n        }\r\n\r\n        // Implement isPlayable\r\n        public get isPlayable(): boolean\r\n        {\r\n            return !!this._source && !!this._source.buffer;\r\n        }\r\n\r\n        // Implement filters\r\n        public get filters(): Filter[]\r\n        {\r\n            return this._nodes.filters;\r\n        }\r\n        public set filters(filters: Filter[])\r\n        {\r\n            this._nodes.filters = filters;\r\n        }\r\n\r\n        // Implements duration\r\n        public get duration(): number\r\n        {\r\n            // @if DEBUG\r\n            console.assert(this.isPlayable, \"Sound not yet playable, no duration\");\r\n            // @endif\r\n            return this._source.buffer.duration;\r\n        }\r\n\r\n        /**\r\n         * Gets and sets the buffer.\r\n         * @name PIXI.sound.webaudio.WebAudioMedia#buffer\r\n         * @type {AudioBuffer}\r\n         */\r\n        public get buffer(): AudioBuffer\r\n        {\r\n            return this._source.buffer;\r\n        }\r\n        public set buffer(buffer: AudioBuffer)\r\n        {\r\n            this._source.buffer = buffer;\r\n        }\r\n\r\n        /**\r\n         * Get the current chained nodes object\r\n         * @private\r\n         * @name PIXI.sound.webaudio.WebAudioMedia#nodes\r\n         * @type {PIXI.sound.webaudio.WebAudioNodes}\r\n         */\r\n        public get nodes(): WebAudioNodes\r\n        {\r\n            return this._nodes;\r\n        }\r\n\r\n        // Implements load\r\n        public load(callback?: LoadedCallback): void\r\n        {\r\n            // Load from the file path\r\n            if (this.parent.url)\r\n            {\r\n                this._loadUrl(callback);\r\n            }\r\n            // Load from the arraybuffer, incase it was loaded outside\r\n            else if (this.source)\r\n            {\r\n                this._decode(this.source, callback);\r\n            }\r\n            else if (callback)\r\n            {\r\n                callback(new Error(\"sound.url or sound.source must be set\"));\r\n            }\r\n            else\r\n            {\r\n                console.error(\"sound.url or sound.source must be set\");\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Loads a sound using XHMLHttpRequest object.\r\n         * @method PIXI.sound.webaudio.WebAudioMedia#_loadUrl\r\n         * @private\r\n         */\r\n        private _loadUrl(callback?: LoadedCallback): void\r\n        {\r\n            const request = new XMLHttpRequest();\r\n            const url: string = this.parent.url;\r\n            request.open(\"GET\", url, true);\r\n            request.responseType = \"arraybuffer\";\r\n\r\n            // Decode asynchronously\r\n            request.onload = () => {\r\n                this.source = request.response as ArrayBuffer;\r\n                this._decode(request.response, callback);\r\n            };\r\n\r\n            // actually start the request\r\n            request.send();\r\n        }\r\n\r\n        /**\r\n         * Decodes the array buffer.\r\n         * @method PIXI.sound.webaudio.WebAudioMedia#decode\r\n         * @param {ArrayBuffer} arrayBuffer From load.\r\n         * @private\r\n         */\r\n        private _decode(arrayBuffer: ArrayBuffer, callback?: LoadedCallback): void\r\n        {\r\n            const context = this.parent.context as WebAudioContext;\r\n            context.decode(arrayBuffer, (err: Error, buffer: AudioBuffer) =>\r\n            {\r\n                if (err)\r\n                {\r\n                    if (callback)\r\n                    {\r\n                        callback(err);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    this.parent.isLoaded = true;\r\n                    this.buffer = buffer;\r\n                    const instance = this.parent.autoPlayStart();\r\n                    if (callback)\r\n                    {\r\n                        callback(null, this.parent, instance);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n","namespace pixi_sound.webaudio {\r\n\t/**\r\n\t * Output for cloneing node\r\n\t * @interface PIXI.sound.SoundNodes~SourceClone\r\n\t * @property {AudioBufferSourceNode} source Cloned audio buffer source\r\n\t * @property {GainNode} gain Independent volume control\r\n\t */\r\n\texport interface SourceClone {\r\n\t\tsource: AudioBufferSourceNode;\r\n\t\tgain: GainNode;\r\n\t};\r\n\r\n\t/**\r\n\t * @private\r\n\t * @class WebAudioNodes\r\n\t * @extends PIXI.sound.Filterable\r\n\t * @private\r\n\t * @memberof PIXI.sound.webaudio\r\n\t * @param {PIXI.sound.webaudio.WebAudioContext} audioContext The audio context.\r\n\t */\r\n\texport class WebAudioNodes extends Filterable {\r\n\t\t/**\r\n\t\t * The buffer size for script processor\r\n\t\t * @name PIXI.sound.SoundNodes.BUFFER_SIZE\r\n\t\t * @type {number}\r\n\t\t * @default 256\r\n\t\t */\r\n\t\tpublic static BUFFER_SIZE: number = 256;\r\n\r\n\t\t/**\r\n\t\t * Get the buffer source node\r\n\t\t * @name PIXI.sound.SoundNodes#bufferSource\r\n\t\t * @type {AudioBufferSourceNode}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic bufferSource: AudioBufferSourceNode;\r\n\r\n\t\t/**\r\n\t\t * Get the script processor node.\r\n\t\t * @name PIXI.sound.SoundNodes#script\r\n\t\t * @type {ScriptProcessorNode}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic script: ScriptProcessorNode;\r\n\r\n\t\t/**\r\n\t\t * Get the gain node\r\n\t\t * @name PIXI.sound.SoundNodes#gain\r\n\t\t * @type {GainNode}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic gain: GainNode;\r\n\r\n\t\t/**\r\n\t\t * Get the analyser node\r\n\t\t * @name PIXI.sound.SoundNodes#analyser\r\n\t\t * @type {AnalyserNode}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic analyser: AnalyserNode;\r\n\r\n\t\t/**\r\n\t\t * Reference to the SoundContext\r\n\t\t * @name PIXI.sound.SoundNodes#context\r\n\t\t * @type {PIXI.sound.webaudio.WebAudioContext}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tpublic context: WebAudioContext;\r\n\r\n\t\tconstructor(context: WebAudioContext) {\r\n\t\t\tconst audioContext: AudioContext = context.audioContext;\r\n\r\n\t\t\tconst bufferSource: AudioBufferSourceNode = audioContext.createBufferSource();\r\n\t\t\tconst script: ScriptProcessorNode = audioContext.createScriptProcessor(WebAudioNodes.BUFFER_SIZE);\r\n\t\t\tconst gain: GainNode = audioContext.createGain();\r\n\t\t\tconst analyser: AnalyserNode = audioContext.createAnalyser();\r\n\r\n\t\t\tbufferSource.connect(analyser);\r\n\t\t\tanalyser.connect(gain);\r\n\t\t\tgain.connect(context.destination);\r\n\t\t\tscript.connect(context.destination);\r\n\r\n\t\t\tsuper(analyser, gain);\r\n\r\n\t\t\tthis.context = context;\r\n\t\t\tthis.bufferSource = bufferSource;\r\n\t\t\tthis.script = script;\r\n\t\t\tthis.gain = gain;\r\n\t\t\tthis.analyser = analyser;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Cleans up.\r\n\t\t * @method PIXI.sound.SoundNodes#destroy\r\n\t\t */\r\n\t\tpublic destroy(): void {\r\n\t\t\tsuper.destroy();\r\n\r\n\t\t\tthis.bufferSource.disconnect();\r\n\t\t\tthis.script.disconnect();\r\n\t\t\tthis.gain.disconnect();\r\n\t\t\tthis.analyser.disconnect();\r\n\r\n\t\t\tthis.bufferSource = null;\r\n\t\t\tthis.script = null;\r\n\t\t\tthis.gain = null;\r\n\t\t\tthis.analyser = null;\r\n\r\n\t\t\tthis.context = null;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Clones the bufferSource. Used just before playing a sound.\r\n\t\t * @method PIXI.sound.SoundNodes#cloneBufferSource\r\n\t\t * @returns {PIXI.sound.SoundNodes~SourceClone} The clone AudioBufferSourceNode.\r\n\t\t */\r\n\t\tpublic cloneBufferSource(): SourceClone {\r\n\t\t\tconst orig: AudioBufferSourceNode = this.bufferSource;\r\n\t\t\tconst source: AudioBufferSourceNode = this.context.audioContext.createBufferSource();\r\n\t\t\tsource.buffer = orig.buffer;\r\n\t\t\tsource.playbackRate.value = orig.playbackRate.value;\r\n\t\t\tsource.loop = orig.loop;\r\n\r\n\t\t\tconst gain: GainNode = this.context.audioContext.createGain();\r\n\t\t\tsource.connect(gain);\r\n\t\t\tgain.connect(this.destination);\r\n\t\t\treturn {source, gain};\r\n\t\t}\r\n\t}\r\n}\r\n","namespace pixi_sound {\r\n\r\n\t/**\r\n\t * Global namespace provided by the PixiJS project.\r\n\t * @namespace PIXI\r\n\t * @see https://github.com/pixijs/pixi.js\r\n\t */\r\n\texport const sound = SoundLibrary.init();\r\n}\r\n\r\n(PIXI as any).sound = pixi_sound;\r\n"]}